<?xml version="1.0"?>
<doc>
    <assembly>
        <name>robocode</name>
    </assembly>
    <members>
        <member name="T:net.sf.robocode.io.LoggerN">
            <summary>
              This is a class used for logging.
            </summary>
             <exclude/>
        </member>
        <member name="T:net.sf.robocode.io.ILoggerN">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.Buffer">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.ByteOrder">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.ByteBuffer">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.HeapByteBuffer">
            <summary>
            A read/write HeapByteBuffer.
            </summary>
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.InvalidMarkException">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.BufferUnderflowException">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.BufferOverflowException">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.nio.ReadOnlyBufferException">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.peer.IRobotStaticsN">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.HiddenAccessN">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.IHiddenBulletHelper">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.IHiddenEventHelper">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.IHiddenRandomHelper">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.IHiddenRulesHelper">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.IHiddenStatusHelper">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.RobocodeInternalPermission">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.security.RobocodeInternalPermissionAttribute">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.serialization.ISerializableHelperN">
            <exclude/>
        </member>
        <member name="T:net.sf.robocode.serialization.RbSerializerN">
            <exclude/>
        </member>
        <member name="T:Robocode.Exception.EventInterruptedException">
            <exclude/>
        </member>
        <member name="M:Robocode.Exception.EventInterruptedException.#ctor(System.Int32)">
            <summary>
            Used by game
            </summary>
        </member>
        <member name="M:Robocode.Exception.EventInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="P:Robocode.Exception.EventInterruptedException.Priority">
            <summary>
            Last top priority
            </summary>
        </member>
        <member name="T:Robocode.Exception.RobotException">
            <summary>
            Throw this exception to stop robot
            </summary>
            <exclude/>
        </member>
        <member name="M:Robocode.Exception.RobotException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Robocode.Exception.RobotException.#ctor(System.String)">
            <summary>
            Constructor with message
            </summary>
        </member>
        <member name="M:Robocode.Exception.RobotException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer">
            <summary>
            The advanced robot peer for advanced robot types like
            <see cref="T:Robocode.AdvancedRobot"/> and <see cref="T:Robocode.TeamRobot"/>.
            <p/>
            A robot peer is the object that deals with game mechanics and rules, and
            makes sure your robot abides by them.
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IBasicRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IStandardRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.ITeamRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.Peer.IStandardRobotPeer">
            <summary>
            The standard robot peer for standard robot types like <see cref="T:Robocode.Robot"/>,
            <see cref="T:Robocode.AdvancedRobot"/>, and <see cref="T:Robocode.TeamRobot"/>.
            <p/>
            A robot peer is the obj that deals with game mechanics and rules, and
            makes sure your robot abides by them.
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IBasicRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.ITeamRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.Peer.IBasicRobotPeer">
            <summary>
            The basic robot peer for all robot types.
            <p/>
            A robot peer is the obj that deals with game mechanics and rules, and
            makes sure your robot abides by them.
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IStandardRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.ITeamRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetName">
            <summary>
            Returns the robot's name.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetTime">
            <summary>
            Returns the game time of the current round, where the time is equal to
            the current turn in the round.
            <p/>
            A battle consists of multiple rounds.
            <p/>
            Time is reset to 0 at the beginning of every round.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetEnergy">
            <summary>
            Returns the robot's current energy.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetX">
            <summary>
            Returns the X position of the robot. (0,0) is at the bottom left of the
            battlefield.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetY"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetY">
            <summary>
            Returns the Y position of the robot. (0,0) is at the bottom left of the
            battlefield.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetX"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetVelocity">
            <summary>
            Returns the velocity of the robot measured in pixels/turn.
            <p/>
            The maximum velocity of a robot is defined by
            <see cref="F:Robocode.Rules.MAX_VELOCITY"/> (8 pixels / turn).
            <seealso cref="F:Robocode.Rules.MAX_VELOCITY"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyHeading">
            <summary>
            Returns the direction that the robot's body is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeading"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarHeading"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeading">
            <summary>
            Returns the direction that the robot's gun is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyHeading"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarHeading"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarHeading">
            <summary>
            Returns the direction that the robot's radar is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyHeading"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeading"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat">
            <summary>
            Returns the current heat of the gun. The gun cannot Fire unless this is
            0. (Calls to Fire will succeed, but will not actually Fire unless
            GetGunHeat() == 0).
            <p/>
            The amount of gun heat generated when the gun is fired is
            1 + (firePower / 5). Each turn the gun heat drops by the amount returned
            by <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunCoolingRate"/>, which is a battle setup.
            <p/>
            Note that all guns are "hot" at the start of each round, where the gun
            heat is 3.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunCoolingRate"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBattleFieldWidth">
            <summary>
            Returns the width of the current battlefield measured in pixels.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBattleFieldHeight">
            <summary>
            Returns the height of the current battlefield measured in pixels.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetOthers">
            <summary>
            Returns how many opponents that are left in the current round.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetNumSentries">
            <summary>
            Returns how many sentry robots that are left in the current round.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetNumRounds">
            <summary>
            Returns the number of rounds in the current battle.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRoundNum"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRoundNum">
            <summary>
            Returns the number of the current round (0 to <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetNumRounds"/> - 1)
            in the battle.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetNumRounds"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetSentryBorderSize">
            <summary>
              Returns the sentry border size for a <see cref="!:Robocode.BorderSentry">BorderSentry</see> that defines the how
              far a BorderSentry is allowed to move from the border edges measured in units.<br/>
              Hence, the sentry border size defines the width/range of the border area surrounding the battlefield that
              BorderSentrys cannot leave (sentry robots robots must stay in the border area), but it also define the
              distance from the border edges where BorderSentrys are allowed/able to make damage to robots entering this
              border area.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunCoolingRate">
            <summary>
            Returns the rate at which the gun will cool down, i.e. the amount of heat
            the gun heat will drop per turn.
            <p/>
            The gun cooling rate is default 0.1 / turn, but can be changed by the
            battle setup. So don't count on the cooling rate being 0.1!
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetDistanceRemaining">
            <summary>
            Returns the distance remaining in the robot's current move measured in
            pixels.
            <p/>
            This call returns both positive and negative values. Positive values
            means that the robot is currently moving forwards. Negative values means
            that the robot is currently moving backwards. If the returned value is 0,
            the robot currently stands still.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyTurnRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunTurnRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarTurnRemaining"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyTurnRemaining">
            <summary>
            Returns the angle remaining in the robot's turn, in radians.
            <p/>
            This call returns both positive and negative values. Positive values
            means that the robot is currently turning to the right. Negative values
            means that the robot is currently turning to the left.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetDistanceRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunTurnRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarTurnRemaining"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunTurnRemaining">
            <summary>
            Returns the angle remaining in the gun's turn, in radians.
            <p/>
            This call returns both positive and negative values. Positive values
            means that the gun is currently turning to the right. Negative values
            means that the gun is currently turning to the left.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetDistanceRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyTurnRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarTurnRemaining"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarTurnRemaining">
            <summary>
            Returns the angle remaining in the radar's turn, in radians.
            <p/>
            This call returns both positive and negative values. Positive values
            means that the radar is currently turning to the right. Negative values
            means that the radar is currently turning to the left.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetDistanceRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyTurnRemaining"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunTurnRemaining"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute">
             <summary>
             Executes any pending actions, or continues executing actions that are
             in process. This call returns after the actions have been started.
             <p/>
             Note that advanced robots <em>must</em> call this function in order to
             Execute pending set* calls like e.g. <see cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)"/>
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)"/>, <see cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)"/> etc.
             Otherwise, these calls will never get executed.
             <p/>
             In this example the robot will move while turning:
             <example>
               <code>
               SetTurnBody(90);
               SetMove(100);
               Execute();
            
               while (GetDistanceRemaining() &gt; 0 &amp;&amp; GetTurnRemaining() &gt; 0)
               {
                   Execute();
               }
               </code>
             </example>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)">
             <summary>
             Immediately moves your robot forward or backward by distance measured in
             pixels.
             <p/>
             This call executes immediately, and does not return until it is complete,
             i.e. when the remaining distance to move is 0.
             <p/>
             If the robot collides with a wall, the move is complete, meaning that the
             robot will not move any further. If the robot collides with another
             robot, the move is complete if you are heading toward the other robot.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot is set to move forward, and negative
             values means that the robot is set to move backward.
             <p/>
             <example>
               <code>
               // Move the robot 100 pixels forward
               Ahead(100);
            
               // Afterwards, move the robot 50 pixels backward
               Ahead(-50);
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnHitWall(Robocode.HitWallEvent)"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnHitRobot(Robocode.HitRobotEvent)"/>
             </summary>
             <param name="distance">
               The distance to move measured in pixels.
               If distance &gt; 0 the robot is set to move forward.
               If distance &lt; 0 the robot is set to move backward.
               If distance = 0 the robot will not move anywhere, but just finish its turn.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)">
             <summary>
             Immediately turns the robot's body to the right or left by radians.
             This call executes immediately, and does not return until it is complete,
             i.e. when the angle remaining in the body's turn is 0.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's body is set to turn right, and
             negative values means that the robot's body is set to turn left.
             If 0 is given as input, the robot's body will stop turning.
             <p/>
             <example>
               <code>
               // Turn the robot's body 180 degrees to the right
               TurnBody(Math.PI);
            
               // Afterwards, turn the robot's body 90 degrees to the left
               TurnBody(-Math.PI / 2);
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.TurnRadar(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
             </summary>
             <param name="radians">
               The amount of radians to turn the robot's body.
               If radians &gt; 0 the robot's body is set to turn right.
               If radians &lt; 0 the robot's body is set to turn left.
               If radians = 0 the robot's body is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnGun(System.Double)">
             <summary>
             Immediately turns the robot's gun to the right or left by radians.
             This call executes immediately, and does not return until it is complete,
             i.e. when the angle remaining in the gun's turn is 0.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's gun is set to turn right, and
             negative values means that the robot's gun is set to turn left.
             If 0 is given as input, the robot's gun will stop turning.
             <p/>
             <example>
               <code>
               // Turn the robot's gun 180 degrees to the right
               TurnGun(Math.PI);
            
               // Afterwards, turn the robot's gun 90 degrees to the left
               TurnGun(-Math.PI / 2);
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.TurnRadar(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
             </summary>
             <param name="radians">
               The amount of radians to turn the robot's gun.
               If radians &gt; 0 the robot's gun is set to turn right.
               If radians &lt; 0 the robot's gun is set to turn left.
               If radians = 0 the robot's gun is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Fire(System.Double)">
             <summary>
             Immediately fires a bullet. The bullet will travel in the direction the
             gun is pointing.
             <p/>
             The specified bullet power is an amount of energy that will be taken from
             the robot's energy. Hence, the more power you want to spend on the
             bullet, the more energy is taken from your robot.
             <p/>
             The bullet will do (4 * power) damage if it hits another robot. If power
             is greater than 1, it will do an additional 2 * (power - 1) damage.
             You will get (3 * power) back if you hit the other robot. You can call
             <see cref="M:Robocode.Rules.GetBulletDamage(System.Double)"/> for getting the damage that a
             bullet with a specific bullet power will do.
             <p/>
             The specified bullet power should be between
             <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/> and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
             <p/>
             Note that the gun cannot Fire if the gun is overheated, meaning that
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat"/> returns a value &gt; 0.
             <p/>
             An event is generated when the bullet hits a robot
             (<see cref="T:Robocode.BulletHitEvent"/>"/&gt;, wall (<see cref="T:Robocode.BulletMissedEvent"/>), or another
             bullet (<see cref="T:Robocode.BulletHitBulletEvent"/>).
             <p/>
             <example>
               <code>
               // Fire a bullet with maximum power if the gun is ready
               if (GetGunHeat() == 0)
               {
                   Bullet bullet = Fire(Rules.MAX_BULLET_POWER);
            
                   // Get the velocity of the bullet
                   if (bullet != null)
                   {
                       double bulletVelocity = bullet.Velocity;
                   }
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)"/>
             <seealso cref="T:Robocode.Bullet"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunCoolingRate"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHit(Robocode.BulletHitEvent)"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletMissed(Robocode.BulletMissedEvent)"/>
             </summary>
             <param name="power">
               The amount of energy given to the bullet, and subtracted from the robot's energy.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)">
             <summary>
             Sets the gun to Fire a bullet when the next execution takes place.
             The bullet will travel in the direction the gun is pointing.
             <p/>
             This call returns immediately, and will not execute until you call
             Execute() or take an action that executes.
             <p/>
             The specified bullet power is an amount of energy that will be taken from
             the robot's energy. Hence, the more power you want to spend on the
             bullet, the more energy is taken from your robot.
             <p/>
             The bullet will do (4 * power) damage if it hits another robot. If power
             is greater than 1, it will do an additional 2 * (power - 1) damage.
             You will get (3 * power) back if you hit the other robot. You can call
             <see cref="M:Robocode.Rules.GetBulletDamage(System.Double)"/> for getting the damage that a
             bullet with a specific bullet power will do.
             <p/>
             The specified bullet power should be between
             <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/> and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
             <p/>
             Note that the gun cannot Fire if the gun is overheated, meaning that
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat"/> returns a value &gt; 0.
             <p/>
             An event is generated when the bullet hits a robot
             (<see cref="T:Robocode.BulletHitEvent"/>), wall (<see cref="T:Robocode.BulletMissedEvent"/>), or another
             bullet (<see cref="T:Robocode.BulletHitBulletEvent"/>).
             <p/>
             <example>
               <code>
               Bullet bullet = null;
            
               // Fire a bullet with maximum power if the gun is ready
               if (GetGunHeat() == 0)
               {
                   bullet = SetFireBullet(Rules.MAX_BULLET_POWER);
               }
               ...
               Execute();
               ...
               // Get the velocity of the bullet
               if (bullet != null)
               {
                   double bulletVelocity = bullet.Velocity;
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Fire(System.Double)"/>
             <seealso cref="T:Robocode.Bullet"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunHeat"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunCoolingRate"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHit(Robocode.BulletHitEvent)"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletMissed(Robocode.BulletMissedEvent)"/>
             </summary>
             <param name="power">
               The amount of energy given to the bullet, and subtracted from the robot's energy.
             </param> 
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)">
             <summary>
             Sets the color of the robot's body.
             <p/>
             A null indicates the default (blue) color.
             <p/>
             <example>
               <code>
               // Don't forget to using System.Drawing at the top...
               using System.Drawing;
               ...
            
               public void Run()
               {
                   SetBodyColor(Color.BLACK);
                   ...
               }
               </code>
             </example>
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetGunColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetRadarColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBulletColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetScanColor(System.Drawing.Color)"/>
             <seealso cref="T:System.Drawing.Color"/>
             <param name="color">The new body color</param>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyColor">
            <summary>
            Returns current color of body
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetGunColor(System.Drawing.Color)">
             <summary>
             Sets the color of the robot's gun.
             <p/>
             A null indicates the default (blue) color.
             <p/>
             <example>
               <code>
               // Don't forget to using System.Drawing at the top...
               using System.Drawing;
               ...
            
               public void Run()
               {
                   SetGunColor(Color.RED);
                   ...
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetRadarColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBulletColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetScanColor(System.Drawing.Color)"/>
             <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="color">The new gun color</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGunColor">
            <summary>
            Returns current color of gun
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetRadarColor(System.Drawing.Color)">
             <summary>
             Sets the color of the robot's radar.
             <p/>
             A null indicates the default (blue) color.
             <p/>
             <example>
               <code>
               // Don't forget to using System.Drawing at the top...
               using System.Drawing;
               ...
            
               public void Run()
               {
                   SetRadarColor(Color.YELLOW);
                   ...
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetGunColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBulletColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetScanColor(System.Drawing.Color)"/>
             <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="color">The new radar color</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetRadarColor">
            <summary>
            Returns current color of radar
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBulletColor(System.Drawing.Color)">
             <summary>
             Sets the color of the robot's bullets.
             <p/>
             A null indicates the default white color.
             <p/>
             <example>
               <code>
               // Don't forget to using System.Drawing at the top...
               using System.Drawing;
               ...
            
               public void Run()
               {
                   SetBulletColor(Color.GREEN);
                   ...
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetGunColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetRadarColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetScanColor(System.Drawing.Color)"/>
             <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="color">The new bullet color</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBulletColor">
            <summary>
            Returns current color of bullet
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetScanColor(System.Drawing.Color)">
             <summary>
             Sets the color of the robot's scan arc.
             <p/>
             A null indicates the default (blue) color.
             <p/>
             <example>
               <code>
               // Don't forget to using System.Drawing at the top...
               using System.Drawing;
               ...
            
               public void Run()
               {
                   SetScanColor(Color.WHITE);
                   ...
               }
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetGunColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetRadarColor(System.Drawing.Color)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBulletColor(System.Drawing.Color)"/>
             <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="color">the new scan arc color</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetScanColor">
            <summary>
            Returns current color of scan beam
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetCall">
            <summary>
            This call <em>must</em> be made from a robot call to inform the game
            that the robot made a Get* call like e.g. <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetX"/> or
            <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetVelocity"/>.
            <p/>
            This method is used by the game to determine if the robot is inactive or
            not. Note: You should only make this call once in a Get* method!
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetCall"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetCall">
             <summary>
             This call <em>must</em> be made from a robot call to inform the game
             that the robot made a Set* call like e.g. <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetFire(System.Double)"/>
             or <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetBodyColor(System.Drawing.Color)"/>.
             <p/>
             This method is used by the game to determine if the robot is inactive or
             not. Note: You should only make this call once in a Set* method!
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetCall"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetGraphics">
            <summary>
            Returns a graphics context used for painting graphical items for the robot.
            <p/>
            This method is very useful for debugging your robot.
            <p/>
            Note that the robot will only be painted if the "Paint" is enabled on the
            robot's console window; otherwise the robot will never get painted (the
            reason being that all robots might have graphical items that must be
            painted, and then you might not be able to tell what graphical items that
            have been painted for your robot).
            <p/>
            Also note that the coordinate system for the graphical context where you
            paint items fits for the Robocode coordinate system where (0, 0) is at
            the bottom left corner of the battlefield, where X is towards right and Y
            is upwards.
            <seealso cref="M:Robocode.RobotInterfaces.IPaintEvents.OnPaint(Robocode.IGraphics)"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.SetDebugProperty(System.String,System.String)">
            <summary>
            Sets the debug property with the specified key to the specified value.
            <p/>
            This method is very useful when debugging or reviewing your robot as you
            will be able to see this property displayed in the robot console for your
            robots under the Debug Properties tab page.
            </summary>
            <param name="key">The name/key of the debug property.</param>
            <param name="value">
              The new value of the debug property, where null or the empty string is used
              for removing this debug property.
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Rescan">
             <summary>
             Rescan for other robots. This method is called automatically by the game,
             as long as the robot is moving, turning its body, turning its gun, or
             turning its radar.
             <p/>
             Rescan will cause <see cref="M:Robocode.RobotInterfaces.IBasicEvents.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
             to be called if you see a robot.
             <p/>
             There are 2 reasons to call Rescan() manually:
             <ol>
             <li>You want to scan after you stop moving.</li>
             <li>You want to interrupt the OnScannedRobot event. This is more
             likely. If you are in OnScannedRobot and call Scan(),
             and you still see a robot, then the system will interrupt your
             OnScannedRobot event immediately and start it from the top.</li>
             </ol>
             <p/>
             This call executes immediately.
            
             <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
             <seealso cref="T:Robocode.ScannedRobotEvent"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)">
            <summary>
            Immediately stops all movement, and saves it for a call to
            <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Resume"/>. If there is already movement saved from a previous
            stop, you can overwrite it by calling Stop(true).
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Resume"/>
            </summary>
            <param name="overwrite">
              If there is already movement saved from a previous stop,
              you can overwrite it by calling Stop(true).
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Resume">
             <summary>
             Immediately resumes the movement you stopped by <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>, if any.
             <p/>
             This call executes immediately, and does not return until it is complete.
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.TurnRadar(System.Double)">
             <summary>
             Immediately turns the robot's radar to the right or left by radians.
             This call executes immediately, and does not return until it is complete,
             i.e. when the angle remaining in the radar's turn is 0.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's radar is set to turn right, and
             negative values means that the robot's radar is set to turn left.
             If 0 is given as input, the robot's radar will stop turning.
             <p/>
             <example>
               <code>
               // Turn the robot's radar 180 degrees to the right
               TurnRadar(Math.PI);
            
               // Afterwards, turn the robot's radar 90 degrees to the left
               TurnRadar(-Math.PI / 2);
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
             </summary>
             <param name="radians">
               The amount of radians to turn the robot's radar.
               If radians &gt; 0 the robot's radar is set to turn right.
               If radians &lt; 0 the robot's radar is set to turn left.
               If radians = 0 the robot's radar is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustGunForBodyTurn(System.Boolean)">
            <summary>
            Sets the gun to turn independent from the robot's turn.
            <p/>
            Ok, so this needs some explanation: The gun is mounted on the robot's
            body. So, normally, if the robot turns 90 degrees to the right, then the
            gun will turn with it as it is mounted on top of the robot's body. To
            compensate for this, you can call IsAdjustGunForBodyTurn(true).
            When this is set, the gun will turn independent from the robot's turn,
            i.e. the gun will compensate for the robot's body turn.
            <p/>
            Note: This method is additive until you reach the maximum the gun can
            turn. The "adjust" is added to the amount you set for turning the robot,
            then capped by the physics of the game. If you turn infinite, then the
            adjust is ignored (and hence overridden).
            <p/>
            <example>
            Assuming both the robot and gun start Out facing up (0 degrees):
              <code>
              // Set gun to turn with the robot's turn
              SetAdjustGunForBodyTurn(false); // This is the default
              TurnBodyRight(Math.PI / 2);
              // At this point, both the robot and gun are facing right (90 degrees)
              TurnBodyLeft(Math.PI / 2);
              // Both are back to 0 degrees
              </code>
              -- or --
              <code>
              // Set gun to turn independent from the robot's turn
              SetAdjustGunForBodyTurn(true);
              TurnBodyRight(Math.PI / 2);
              // At this point, the robot is facing right (90 degrees), but the gun is still facing up.
              TurnBodyLeft(Math.PI / 2);
              // Both are back to 0 degrees.
              </code>
            </example>
            <p/>
            Note: The gun compensating this way does count as "turning the gun".
            See <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForGunTurn(System.Boolean)"/> for details.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForGunTurn(System.Boolean)"/>
            </summary>
            <param name="independent">
              true if the gun must turn independent from the robot's turn;
              false if the gun must turn with the robot's turn.
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForGunTurn(System.Boolean)">
            <summary>
            Sets the radar to turn independent from the gun's turn.
            <p/>
            Ok, so this needs some explanation: The radar is mounted on the robot's
            gun. So, normally, if the gun turns 90 degrees to the right, then the
            radar will turn with it as it is mounted on top of the gun. To compensate
            for this, you can call IsAdjustRadarForGunTurn(true). When this
            is set, the radar will turn independent from the robot's turn, i.e. the
            radar will compensate for the gun's turn.
            <p/>
            Note: This method is additive until you reach the maximum the radar can
            turn. The "adjust" is added to the amount you set for turning the robot,
            then capped by the physics of the game. If you turn infinite, then the
            adjust is ignored (and hence overridden).
            <p/>
            <example>
            Assuming both the gun and radar start Out facing up (0 degrees):
              <code>
              // Set radar to turn with the gun's turn
              SetAdjustRadarForGunTurn(false); // This is the default
              TurnGunRight(Math.PI / 2);
              // At this point, both the radar and gun are facing right (90 degrees);
              </code>
              -- or --
              <code>
              // Set radar to turn independent from the gun's turn
              SetAdjustRadarForGunTurn(true);
              TurnGunRight(Math.PI / 2);
              // At this point, the gun is facing right (90 degrees), but the radar is still facing up.
              </code>
            </example>
            Note: Calling IsAdjustRadarForGunTurn(bool) will
            automatically call <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForBodyTurn(System.Boolean)"/> with the
            same value, unless you have already called it earlier. This behavior is
            primarily for backward compatibility with older Robocode robots.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForBodyTurn(System.Boolean)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustGunForBodyTurn(System.Boolean)"/>
            </summary>
            <param name="independent">
              true if the radar must turn independent from the gun's turn;
              false if the radar must turn with the gun's turn.
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForBodyTurn(System.Boolean)">
            <summary>
            Sets the radar to turn independent from the robot's turn.
            <p/>
            Ok, so this needs some explanation: The radar is mounted on the gun, and
            the gun is mounted on the robot's body. So, normally, if the robot turns
            90 degrees to the right, the gun turns, as does the radar. Hence, if the
            robot turns 90 degrees to the right, then the gun and radar will turn
            with it as the radar is mounted on top of the gun. To compensate for
            this, you can call IsAdjustRadarForBodyTurn(true). When this is
            set, the radar will turn independent from the robot's turn, i.e. the
            radar will compensate for the robot's turn.
            <p/>
            Note: This method is additive until you reach the maximum the radar can
            turn. The "adjust" is added to the amount you set for turning the gun,
            then capped by the physics of the game. If you turn infinite, then the
            adjust is ignored (and hence overridden).
            <p/>
            <example>
            Assuming the robot, gun, and radar all start Out facing up (0 degrees):
              <code>
              // Set radar to turn with the robots's turn
              SetAdjustRadarForBodyTurn(false); // This is the default
              TurnRight(Math.PI / 2);
              // At this point, the body, gun, and radar are all facing right (90 degrees);
              </code>
              -- or --
              <code>
              // Set radar to turn independent from the robot's turn
              SetAdjustRadarForBodyTurn(true);
              TurnRight(Math.PI / 2);
              // At this point, the robot and gun are facing right (90 degrees), but the radar is still facing up.
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustGunForBodyTurn(System.Boolean)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.SetAdjustRadarForGunTurn(System.Boolean)"/>
            </summary>
            <param name="independent">
              true if the radar must turn independent from the robots's turn;
              false if the radar must turn with the robot's turn.
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustGunForBodyTurn">
            <summary>
            Checks if the gun is set to adjust for the robot turning, i.e. to turn
            independent from the robot's body turn.
            <p/>
            This call returns true if the gun is set to turn independent of
            the turn of the robot's body. Otherwise, false is returned,
            meaning that the gun is set to turn with the robot's body turn.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustGunForBodyTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForBodyTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForGunTurn"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForGunTurn">
            <summary>
            Checks if the radar is set to adjust for the robot turning, i.e. to turn
            independent from the robot's body turn.
            <p/>
            This call returns true if the radar is set to turn independent of
            the turn of the robot. Otherwise, false is returned, meaning that
            the radar is set to turn with the robot's turn.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForBodyTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustGunForBodyTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForGunTurn"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForBodyTurn">
            <summary>
            Checks if the radar is set to adjust for the gun turning, i.e. to turn
            independent from the gun's turn.
            <p/>
            This call returns true if the radar is set to turn independent of
            the turn of the gun. Otherwise, false is returned, meaning that
            the radar is set to turn with the gun's turn.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForGunTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustGunForBodyTurn"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.IsAdjustRadarForBodyTurn"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetStop(System.Boolean)">
            <summary>
            This call is identical to <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>,
            but returns immediately, and will not execute until you
            call <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/> or take an action that executes.
            <p/>
            If there is already movement saved from a previous stop, you can
            overwrite it by calling SetStop(true).
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Resume"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetResume"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/>
            </summary>
            <param name="overwrite">true if the movement saved from a previous stop
                             should be overwritten; false otherwise.</param> 
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetResume">
             <summary>
             Sets the robot to Resume the movement stopped by <see cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>
             or <see cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetStop(System.Boolean)"/>, if any.
             <p/>
             This call returns immediately, and will not execute until you call
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/> or take an action that executes.
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Resume"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.Stop(System.Boolean)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetStop(System.Boolean)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)">
             <summary>
             Sets the robot to move forward or backward by distance measured in pixels
             when the next execution takes place.
             <p/>
             This call returns immediately, and will not execute until you call
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/> or take an action that executes.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot is set to move forward, and negative
             values means that the robot is set to move backward. If 0 is given as
             input, the robot will stop its movement, but will have to decelerate
             till it stands still, and will thus not be able to stop its movement
             immediately, but eventually.
             <p/>
             <example>
               <code>
               // Set the robot to move 50 pixels forward
               SetMove(50);
            
               // Set the robot to move 100 pixels backward
               // (overrides the previous order)
               SetMove(-100);
            
               ...
               // Executes the last SetMove()
               Execute();
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxVelocity(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnRadar(System.Double)"/>
             </summary>
             <param name="distance">
               The distance to move measured in pixels.
               If distance &gt; 0 the robot is set to move forward.
               If distance &lt; 0 the robot is set to move backward.
               If distance = 0 the robot is set to stop its movement.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)">
             <summary>
             Sets the robot's body to turn right or left by radians when the next
             execution takes place.
             <p/>
             This call returns immediately, and will not execute until you call
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/> or take an action that
             executes.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's body is set to turn right, and
             negative values means that the robot's body is set to turn left.
             If 0 is given as input, the robot's body will stop turning.
             <p/>
             <example>
               <code>
               // Set the robot's body to turn 180 degrees to the right
               SetTurnBody(Math.PI);
            
               // Set the robot's body to turn 90 degrees to the left instead of right
               // (overrides the previous order)
               SetTurnBody(-Math.PI / 2);
            
               ...
               // Executes the last SetTurnBody()
               Execute();
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnRadar(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxTurnRate(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)"/>
             </summary>
             <param name="radians">T
               The amount of radians to turn the robot's body.
               If radians &gt; 0 the robot's body is set to turn right.
               If radians &lt; 0 the robot's body is set to turn left.
               If radians = 0 the robot's body is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnGun(System.Double)">
             <summary>
             Sets the robot's gun to turn right or left by radians when the next
             execution takes place.
             <p/>
             This call returns immediately, and will not execute until you call
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/> or take an action that
             executes.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's gun is set to turn right, and
             negative values means that the robot's gun is set to turn left.
             If 0 is given as input, the robot's gun will stop turning.
             <p/>
             <example>
               <code>
               // Set the robot's gun to turn 180 degrees to the right
               SetTurnGun(Math.PI);
            
               // Set the robot's gun to turn 90 degrees to the left instead of right
               // (overrides the previous order)
               SetTurnGun(-Math.PI / 2);
            
               ...
               // Executes the last setTurnFun()
               Execute();
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnRadar(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)"/>
             </summary>
             <param name="radians">
               The amount of radians to turn the robot's gun.
               If radians &gt; 0 the robot's gun is set to turn right.
               If radians &lt; 0 the robot's gun is set to turn left.
               If radians = 0 the robot's gun is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnRadar(System.Double)">
             <summary>
             Sets the robot's radar to turn right or left by radians when the next
             execution takes place.
             <p/>
             This call returns immediately, and will not execute until you call
             <see cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Execute"/>  or take an action that
             executes.
             <p/>
             Note that both positive and negative values can be given as input, where
             positive values means that the robot's radar is set to turn right, and
             negative values means that the robot's radar is set to turn left.
             If 0 is given as input, the robot's radar will stop turning.
             <p/>
             <example>
               <code>
               // Set the robot's radar to turn 180 degrees to the right
               SetTurnRadar(Math.PI);
            
               // Set the robot's radar to turn 90 degrees to the left instead of right
               // (overrides the previous order)
               SetTurnRadar(-Math.PI / 2);
            
               ...
               // Executes the last SetTurnRadar()
               Execute();
               </code>
             </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IStandardRobotPeer.TurnRadar(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnGun(System.Double)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)"/>
             </summary>
             <param name="radians">
               The amount of radians to turn the robot's radar.
               If radians &gt; 0 the robot's radar is set to turn right.
               If radians &lt; 0 the robot's radar is set to turn left.
               If radians = 0 the robot's radar is set to stop turning.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxTurnRate(System.Double)">
            <summary>
            Sets the maximum turn rate of the robot measured in degrees if the robot
            should turn slower than <see cref="F:Robocode.Rules.MAX_TURN_RATE"/> (10 degress/turn).
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetTurnBody(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxVelocity(System.Double)"/>
            </summary>
            <param name="newMaxTurnRate">
              The new maximum turn rate of the robot measured in degrees.
              Valid values are 0 - <see cref="F:Robocode.Rules.MAX_TURN_RATE"/>
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxVelocity(System.Double)">
            <summary>
            Sets the maximum velocity of the robot measured in pixels/turn if the
            robot should move slower than <see cref="F:Robocode.Rules.MAX_VELOCITY"/> (8 pixels/turn).
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMove(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetMaxTurnRate(System.Double)"/>
            </summary>
            <param name="newMaxVelocity">
              The new maximum turn rate of the robot measured in pixels/turn.
              Valid values are 0 - <see cref="F:Robocode.Rules.MAX_VELOCITY"/>
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.WaitFor(Robocode.Condition)">
            <summary>
            Does not return until a condition is met, i.e. when a <see cref="M:Robocode.Condition.Test"/> returns true.
            <p/>
            This call executes immediately.
            <p/>
            See the Sample.Crazy robot for how this method can be used.
            <seealso cref="T:Robocode.Condition"/>
            <seealso cref="M:Robocode.Condition.Test"/>
            </summary>
            <param name="condition">The condition that must be met before this call returns</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetInterruptible(System.Boolean)">
            <summary>
            Call this during an event handler to allow new events of the same
            priority to restart the event handler.
            <p/>
            <example>
              <code>
              public void OnScannedRobot(ScannedRobotEvent e)
              {
                  Fire(1);
                  SetInterruptible(true);
                  Move(100);  // If you see a robot while moving ahead,
                              // this handler will start from the top
                              // Without SetInterruptible(true), we wouldn't
                              // receive scan events at all!
                  // We'll only get here if we don't see a robot during the move.
                  Out().WriteLine("Ok, I can't see anyone");
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetEventPriority(System.String,System.Int32)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
            </summary>
            <param name="interruptible">
              true if the event handler should be interrupted if new events of
              the same priority occurs; false otherwise
            </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetEventPriority(System.String,System.Int32)">
            <summary>
            Sets the priority of a class of events.
            <p/>
            Events are sent to the onXXX handlers in order of priority.
            Higher priority events can interrupt lower priority events.
            For events with the same priority, newer events are always sent first.
            Valid priorities are 0 - 99, where 100 is reserved and 80 is the default
            priority.
            <p/>
            <example>
              <code>
              SetEventPriority("RobotDeathEvent", 15);
              </code>
            <p/>
            </example>
            The default priorities are, from highest to lowest:
              <code>
              <see cref="T:Robocode.BattleEndedEvent"/>:     100 (reserved)
              <see cref="T:Robocode.WinEvent"/>:             100 (reserved)
              <see cref="T:Robocode.SkippedTurnEvent"/>:     100 (reserved)
              <see cref="T:Robocode.StatusEvent"/>:           99
              Key and mouse events:  98
              <see cref="T:Robocode.CustomEvent"/>:           80 (default value)
              <see cref="T:Robocode.MessageEvent"/>:          75
              <see cref="T:Robocode.RobotDeathEvent"/>:       70
              <see cref="T:Robocode.BulletMissedEvent"/>:     60
              <see cref="T:Robocode.BulletHitBulletEvent"/>:  55
              <see cref="T:Robocode.BulletHitEvent"/>:        50
              <see cref="T:Robocode.HitByBulletEvent"/>:      40
              <see cref="T:Robocode.HitWallEvent"/>:          30
              <see cref="T:Robocode.HitRobotEvent"/>:         20
              <see cref="T:Robocode.ScannedRobotEvent"/>:     10
              <see cref="T:Robocode.PaintEvent"/>:             5
              <see cref="T:Robocode.DeathEvent"/>:            -1 (reserved)
              </code>
            <p/>
            Note that you cannot change the priority for events with the special
            priority value -1 or 100 (reserved) as these event are system events.
            Also note that you cannot change the priority of CustomEvent.
            Instead you must change the priority of the condition(s) for your custom
            event(s).
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetEventPriority(System.String)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetInterruptible(System.Boolean)"/>
            </summary>
            <param name="eventClass">The name of the event class (string) to set the priority for</param>
            <param name="priority">The new priority for that event class</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetEventPriority(System.String)">
            <summary>
            Returns the current priority of a class of events.
            An event priority is a value from 0 - 99. The higher value, the higher
            priority.
            <p/>
            <example>
              <code>
              int myHitRobotPriority = GetEventPriority("HitRobotEvent");
              </code>
            <p/>
            </example>
            The default priorities are, from highest to lowest:
              <code>
              <see cref="T:Robocode.BattleEndedEvent"/>:     100 (reserved)
              <see cref="T:Robocode.WinEvent"/>:             100 (reserved)
              <see cref="T:Robocode.SkippedTurnEvent"/>:     100 (reserved)
              <see cref="T:Robocode.StatusEvent"/>:           99
              Key and mouse events:  98
              <see cref="T:Robocode.CustomEvent"/>:           80 (default value)
              <see cref="T:Robocode.MessageEvent"/>:          75
              <see cref="T:Robocode.RobotDeathEvent"/>:       70
              <see cref="T:Robocode.BulletMissedEvent"/>:     60
              <see cref="T:Robocode.BulletHitBulletEvent"/>:  55
              <see cref="T:Robocode.BulletHitEvent"/>:        50
              <see cref="T:Robocode.HitByBulletEvent"/>:      40
              <see cref="T:Robocode.HitWallEvent"/>:          30
              <see cref="T:Robocode.HitRobotEvent"/>:         20
              <see cref="T:Robocode.ScannedRobotEvent"/>:     10
              <see cref="T:Robocode.PaintEvent"/>:             5
              <see cref="T:Robocode.DeathEvent"/>:            -1 (reserved)
              </code>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.SetEventPriority(System.String,System.Int32)"/>
            </summary>
            <param name="eventClass">The name of the event class (string) </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.AddCustomEvent(Robocode.Condition)">
             <summary>
             Registers a custom event to be called when a condition is met.
             When you are finished with your condition or just want to remove it you
             must call <see cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.RemoveCustomEvent(Robocode.Condition)"/>.
             <p/>
             <example>
               <code>
               AddCustomEvent(
                   new Condition("triggerhit", (c) =&gt;
                   {
                      return Energy &lt;= trigger;
                   }));
            
               // Add our custom event based on our condition
               AddCustomEvent(triggerHitCondition);
               </code>
            </example>
             <seealso cref="T:Robocode.Condition"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.RemoveCustomEvent(Robocode.Condition)"/>
             </summary>
             <param name="condition">The condition that must be met.</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.RemoveCustomEvent(Robocode.Condition)">
             <summary>
             Removes a custom event that was previously added by calling <see cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.AddCustomEvent(Robocode.Condition)"/>.
             <p/>
             <example>
               <code>
               AddCustomEvent(
                   new Condition("triggerhit", (c) =&gt;
                   {
                      return Energy &lt;= trigger;
                   }));
            
               // Add our custom event based on our condition
               AddCustomEvent(triggerHitCondition);
               ...
               // do something with your robot
               ...
               // Remove the custom event based on our condition
               RemoveCustomEvent(triggerHitCondition);
               </code>
             </example>
             <seealso cref="T:Robocode.Condition"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.AddCustomEvent(Robocode.Condition)"/>
             </summary>
             <param name="condition">
               The condition that was previous added and that must be removed now.
             </param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.clearAllEvents">
             <summary>
             Clears Out any pending events in the robot's event queue immediately.
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents">
            <summary>
            Returns a list containing all events currently in the robot's queue.
            You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (Event evnt in GetAllEvents())
              {
                  if (event is HitRobotEvent)
                  {
                      // do something with the event
                  }
                  else if (event is HitByBulletEvent)
                  {
                      // do something with the event
                  }
              }
              </code>
            </example>
            <seealso cref="T:Robocode.Event"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.clearAllEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetStatusEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetScannedRobotEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletHitEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletMissedEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletHitBulletEvents"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetRobotDeathEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetStatusEvents">
            <summary>
            Returns a list containing all StatusEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (StatusEvent evnt inGetStatusEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnStatus(Robocode.StatusEvent)"/>
            <seealso cref="T:Robocode.StatusEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletMissedEvents">
            <summary>
            Returns a list containing all BulletMissedEvents currently in the
            robot's queue. You might, for example, call this while processing another
            event.
            <p/>
            <example>
              <code>
              foreach (BulletMissedEvent evnt inGetBulletMissedEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletMissed(Robocode.BulletMissedEvent)"/>
            <seealso cref="T:Robocode.BulletMissedEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletHitBulletEvents">
            <summary>
            Returns a list containing all BulletHitBulletEvents currently in the
            robot's queue. You might, for example, call this while processing another
            event.
            <p/>
            <example>
              <code>
              foreach (BulletHitBulletEvent evnt inGetBulletHitBulletEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
            <seealso cref="T:Robocode.BulletHitBulletEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetBulletHitEvents">
            <summary>
            Returns a list containing all BulletHitEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (BulletHitEvent event: GetBulletHitEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHit(Robocode.BulletHitEvent)"/>
            <seealso cref="T:Robocode.BulletHitEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetHitByBulletEvents">
            <summary>
            Returns a list containing all HitByBulletEvents currently in the
            robot's queue. You might, for example, call this while processing
            another event.
            <p/>
            <example>
              <code>
              foreach (HitByBulletEvent evnt inGetHitByBulletEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnHitByBullet(Robocode.HitByBulletEvent)"/>
            <seealso cref="T:Robocode.HitByBulletEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetHitRobotEvents">
            <summary>
            Returns a list containing all HitRobotEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (HitRobotEvent evnt inGetHitRobotEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnHitRobot(Robocode.HitRobotEvent)"/>
            <seealso cref="T:Robocode.HitRobotEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetHitWallEvents">
            <summary>
            Returns a list containing all HitWallEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (HitWallEvent evnt inGetHitWallEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnHitWall(Robocode.HitWallEvent)"/>
            <seealso cref="T:Robocode.HitWallEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetRobotDeathEvents">
            <summary>
            Returns a list containing all RobotDeathEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (RobotDeathEvent evnt inGetRobotDeathEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnRobotDeath(Robocode.RobotDeathEvent)"/>
            <seealso cref="T:Robocode.RobotDeathEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetScannedRobotEvents">
            <summary>
            Returns a list containing all ScannedRobotEvents currently in the
            robot's queue. You might, for example, call this while processing another
            event.
            <p/>
            <example>
              <code>
              foreach (ScannedRobotEvent evnt inGetScannedRobotEvents())
              {
                  // do something with the event
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
            <seealso cref="T:Robocode.ScannedRobotEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataDirectory">
            <summary>
            Returns a file representing a data directory for the robot, which can be
            written to.
            <p/>
            The system will automatically create the directory for you, so you do not
            need to create it by yourself.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataFile(System.String)"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataFile(System.String)">
            <summary>
            Returns a file in your data directory that you can write to.
            <p/>
            The system will automatically create the directory for you, so you do not
            need to create it by yourself.
            <p/>
            Please notice that the max. size of your data file is set to 200000
            (~195 KB).
            <p/>
            See the Sample.SittingDuck to see an example of how to use this
            method.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataDirectory"/>
            </summary>
            <param name="filename">The file name of the data file for your robot</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataQuotaAvailable">
            <summary>
            Returns the data quota available in your data directory, i.e. the amount
            of bytes left in the data directory for the robot.
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataDirectory"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer.GetDataFile(System.String)"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer">
            <summary>
            The junior robot peer for junior robot types like <see cref="T:Robocode.JuniorRobot"/>.
            <p/>
            A robot peer is the obj that deals with game mechanics and rules, and
            makes sure your robot abides by them.
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IBasicRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IStandardRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.ITeamRobotPeer"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer.TurnAndMove(System.Double,System.Double)">
            <summary>
            Moves this robot forward or backwards by pixels and turns this robot
            right or left by degrees at the same time. The robot will move in a curve
            that follows a perfect circle, and the moving and turning will end at
            exactly the same time.
            <p/>
            Note that the max. velocity and max. turn rate is automatically adjusted,
            which means that the robot will move slower the sharper the turn is
            compared to the distance.
            <p/>
            Note that both positive and negative values can be given as input:
            <ul>
            <li>If the distance parameter is set to a positive value, it
            means that the robot is set to move forward, and a negative value means
            that the robot is set to move backward. If set to 0, the robot will not
            move, but will be able to turn.</li>
            <li>If the radians parameter is set to a positive value, it means
            that the robot is set to turn to the right, and a negative value means
            that the robot is set to turn to the left. If set to 0, the robot will
            not turn, but will be able to move.</li>
            </ul>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.Move(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.TurnBody(System.Double)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetBodyHeading"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetX"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.IBasicRobotPeer.GetY"/>
            </summary>
            <param name="distance">
              The distance to move measured in pixels.
              If distance &gt; 0 the robot is set to move forward.
              If distance &lt; 0 the robot is set to move backward.
              If distance = 0 the robot will not move anywhere, but just finish its turn.
            </param>
            <param name="radians">
              The amount of radians to turn the robot's body.
              If radians &gt; 0 the robot's body is set to turn right.
              If radians &lt; 0 the robot's body is set to turn left.
              If radians = 0 the robot's body is set to stop turning.
            </param>
        </member>
        <member name="T:Robocode.RobotInterfaces.Peer.ITeamRobotPeer">
            <summary>
            The team robot peer for team robots like <see cref="T:Robocode.TeamRobot"/>.
            <p/>
            A robot peer is the object that deals with game mechanics and rules, and
            makes sure your robot abides by them.
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IBasicRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IStandardRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IAdvancedRobotPeer"/>
            <seealso cref="T:Robocode.RobotInterfaces.Peer.IJuniorRobotPeer"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.GetTeammates">
            <summary>
            Returns the names of all teammates, or null there is no teammates.
            <p/>
            <example>
              <code>
              public void Run()
              {
                  // Prints Out all teammates
                  string[] teammates = GetTeammates();
                  if (teammates != null)
                  {
                      foreach (string member in teammates)
                      {
                          Out.WriteLine(member);
                      }
                  }
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.IsTeammate(System.String)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.BroadcastMessage(System.Object)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.SendMessage(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.IsTeammate(System.String)">
             <summary>
             Checks if a given robot name is the name of one of your teammates.
             <p/>
             <example>
               <code>
               public void OnScannedRobot(ScannedRobotEvent e)
               {
                   if (IsTeammate(e.Name)
                   {
                       return;
                   }
                   Fire(1);
               }
               </code>
             </example>
            
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.GetTeammates"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.BroadcastMessage(System.Object)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.SendMessage(System.String,System.Object)"/>
             </summary>
             <param name="name">The robot name to check</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.BroadcastMessage(System.Object)">
             <summary>
             Broadcasts a message to all teammates.
             <p/>
             <example>
               <code>
               public void Run()
               {
                   BroadcastMessage("I'm here!");
               }
               </code>
            </example>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.IsTeammate(System.String)"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.GetTeammates"/>
             <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.SendMessage(System.String,System.Object)"/>
             </summary>
             <param name="message">The message to broadcast to all teammates</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.SendMessage(System.String,System.Object)">
            <summary>
            Sends a message to one (or more) teammates.
            <p/>
            <example>
              <code>
              public void Run()
              {
                  SendMessage("Sample.DroidBot", "I'm here!");
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.IsTeammate(System.String)"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.GetTeammates"/>
            <seealso cref="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.BroadcastMessage(System.Object)"/>
            </summary>
            <param name="name">The name of the intended recipient of the message</param>
            <param name="message">The message to send</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.Peer.ITeamRobotPeer.GetMessageEvents">
            <summary>
            Returns a list containing all MessageEvents currently in the robot's
            queue. You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (MessageEvent e in GetMessageEvents())
              {
                 // do something with e
              }
              </code>
            </example>
            <seealso cref="M:Robocode.RobotInterfaces.ITeamEvents.OnMessageReceived(Robocode.MessageEvent)"/>
            <seealso cref="T:Robocode.MessageEvent"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IAdvancedEvents">
            <summary>
            An event interface for receiving advanced robot events with an
            <see cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IAdvancedEvents.OnSkippedTurn(Robocode.SkippedTurnEvent)">
            <summary>
            This method is called if the robot is using too much time between
            actions. When this event occur, the robot's turn is skipped, meaning that
            it cannot take action anymore in this turn.
            <p/>
            If you receive 30 skipped turn event, your robot will be removed from the
            round and loose the round.
            <p/>
            You will only receive this event after taking an action. So a robot in an
            infinite loop will not receive any events, and will simply be stopped.
            <p/>
            No correctly working, reasonable robot should ever receive this event
            unless it is using too many CPU cycles.
            <seealso cref="T:Robocode.SkippedTurnEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
            <param name="evnt">The skipped turn event set by the game</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IAdvancedEvents.OnCustomEvent(Robocode.CustomEvent)">
            <summary>
            This method is called when a custom condition is met.
            <p/>
            See the sample robots for examples of use, e.g. the Sample.Target
            robot.
            <seealso cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>
            <seealso cref="T:Robocode.CustomEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
            <param name="evnt">The custom event that occurred</param>
        </member>
        <member name="T:Robocode.RobotInterfaces.IAdvancedRobot">
            <summary>
            A robot interface for creating a more advanced type of robot like
            <see cref="T:Robocode.AdvancedRobot"/> that is able to handle advanced robot events.
            An advanced robot allows non-blocking calls, custom events, get notifications
            about skipped turns, and also allow writes to the file system.
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IBasicRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IJuniorRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IBasicRobot">
            <summary>
            A robot interface for creating a basic type of robot like <see cref="T:Robocode.Robot"/>
            that is able to receive common robot events, but not interactive events as
            with the <see cref="T:Robocode.Robot"/> class.
            A basic robot allows blocking calls only and cannot handle custom events nor
            writes to the file system like an advanced robot.
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IJuniorRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicRobot.GetRobotRunnable">
            <summary>
            This method is called by the game to invoke the <see cref="M:Robocode.RobotInterfaces.IRunnable.Run"/>
            method of your robot, where the program of your robot is implemented.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicRobot.GetBasicEventListener">
            <summary>
            This method is called by the game to notify this robot about basic
            robot event. Hence, this method must be implemented so it returns your
            <see cref="T:Robocode.RobotInterfaces.IBasicEvents"/> listener.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicRobot.SetPeer(Robocode.RobotInterfaces.Peer.IBasicRobotPeer)">
            <summary>
            Do not call this method! Your robot will simply stop interacting with
            the game.
            <p/>
            This method is called by the game. A robot peer is the object that deals
            with game mechanics and rules, and makes sure your robot abides by them.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicRobot.SetOut(System.IO.TextWriter)">
            <summary>
            Do not call this method!
            <p/>
            This method is called by the game when setting the Out stream for your
            robot.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IAdvancedRobot.GetAdvancedEventListener">
            <summary>
            This method is called by the game to notify this robot about advanced
            robot event. Hence, this method must be implemented so it returns your
            <see cref="T:Robocode.RobotInterfaces.IAdvancedEvents"/> listener.
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IBasicEvents">
            <summary>
            An event interface for receiving basic robot events with an
            <see cref="T:Robocode.RobotInterfaces.IBasicRobot"/>.
            <seealso cref="T:Robocode.RobotInterfaces.IBasicRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnStatus(Robocode.StatusEvent)">
            <summary>
            This method is called every turn in a battle round in order to provide
            the robot status as a complete snapshot of the robot's current state at
            that specific time.
            <p/>
            The main benefit of this method is that you'll automatically receive all
            current data values of the robot like e.g. the x and y coordinate,
            heading, gun heat etc., which are grouped into the exact same time/turn.
            <p/>
            This is the only way to map the robots data values to a specific time.
            For example, it is not possible to determine the exact time of the
            robot's heading by calling first calling <see cref="P:Robocode.Robot.Time"/> and then
            <see cref="P:Robocode.Robot.Heading"/> afterwards, as the time <em>might</em> change
            after between the <see cref="P:Robocode.Robot.Time"/> and <see cref="P:Robocode.Robot.Heading"/>
            call.
            <seealso cref="T:Robocode.StatusEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHit(Robocode.BulletHitEvent)">
            <summary>
            This method is called when one of your bullets hits another robot.
            You should override it in your robot if you want to be informed of this
            event.
            <p/>
            <example>
              <code>
              public void OnBulletHit(BulletHitEvent evnt)
              {
                  Out.WriteLine("I hit " + evnt.Name + "!");
              }
              </code>
            </example>
            <seealso cref="T:Robocode.BulletHitEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletHitBullet(Robocode.BulletHitBulletEvent)">
             <summary>
             This method is called when one of your bullets hits another bullet.
             You should override it in your robot if you want to be informed of this
             event.
             <p/>
             <example>
               <code>
               public void OnBulletHitBullet(BulletHitBulletEvent evnt)
               {
                   Out.WriteLine("I hit a bullet fired by " + evnt.Bullet.Name + "!");
               }
               </code>
            </example>
             <seealso cref="T:Robocode.BulletHitBulletEvent"/>
             <seealso cref="T:Robocode.Event"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnBulletMissed(Robocode.BulletMissedEvent)">
             <summary>
             This method is called when one of your bullets misses, i.e. hits a wall.
             You should override it in your robot if you want to be informed of this
             event.
             <p/>
             <example>
               <code>
               public void OnBulletMissed(BulletMissedEvent evnt)
               {
                   Out.WriteLine("Drat, I missed.");
               }
               </code>
            </example>
             <seealso cref="T:Robocode.BulletMissedEvent"/>
             <seealso cref="T:Robocode.Event"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnDeath(Robocode.DeathEvent)">
            <summary>
            This method is called if your robot dies.
            <p/>
            You should override it in your robot if you want to be informed of this
            event. Actions will have no effect if called from this section. The
            intent is to allow you to perform calculations or print something out
            when the robot is killed.
            <seealso cref="T:Robocode.DeathEvent"/>
            <seealso cref="T:Robocode.WinEvent"/>
            <seealso cref="T:Robocode.BattleEndedEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnHitByBullet(Robocode.HitByBulletEvent)">
             <summary>
             This method is called when your robot is hit by a bullet.
             You should override it in your robot if you want to be informed of this
             event.
             <p/>
             <example>
               <code>
               void OnHitByBullet(HitByBulletEvent evnt)
               {
                   Out.WriteLine(event.RobotName + " hit me!");
               }
               </code>
            </example>
             <seealso cref="T:Robocode.HitByBulletEvent"/>
             <seealso cref="T:Robocode.Event"/>
             </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnHitRobot(Robocode.HitRobotEvent)">
            <summary>
            This method is called when your robot collides with another robot.
            You should override it in your robot if you want to be informed of this
            event.
            <p/>
            <example>
              <code>
              void OnHitRobot(HitRobotEvent evnt)
              {
                  if (event.Bearing &gt; -90 &amp;&amp; evnt.Bearing &lt;= 90)
                  {
                      Back(100);
                  }
                  else
                  {
                      Ahead(100);
                  }
              }
              </code>
              -- or perhaps, for a more advanced robot --
              <code>
              public void OnHitRobot(HitRobotEvent evnt)
              {
                  if (event.Bearing &gt; -90 &amp;&amp; evnt.Bearing &lt;= 90)
                  {
                      SetBack(100);
                  }
                  else
                  {
                      SetAhead(100);
                  }
              }
              </code>
            </example>
            <p/>
            The angle is relative to your robot's facing. So 0 is straight ahead of
            you.
            <p/>
            This event can be generated if another robot hits you, in which case
            <see cref="P:Robocode.HitRobotEvent.IsMyFault"/> will return false.
            In this case, you will not be automatically stopped by the game --
            but if you continue moving toward the robot you will hit it (and
            generate another event). If you are moving away, then you won't hit it.
            <seealso cref="T:Robocode.HitRobotEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnHitWall(Robocode.HitWallEvent)">
            <summary>
            This method is called when your robot collides with a wall.
            You should override it in your robot if you want to be informed of this
            event.
            <p/>
            The wall at the top of the screen is 0 degrees, right is 90 degrees,
            bottom is 180 degrees, left is 270 degrees. But this event is relative to
            your heading, so: The bearing is such that <see cref="M:Robocode.Robot.TurnRight(System.Double)"/>
            <see cref="P:Robocode.HitWallEvent.Bearing"/> will point you perpendicular to the wall.
            <p/>
            <example>
              <code>
              void OnHitWall(HitWallEvent evnt)
              {
                  Out.WriteLine("Ouch, I hit a wall bearing " + evnt.Bearing + " degrees.");
              }
              </code>
            </example>
            <seealso cref="T:Robocode.HitWallEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnScannedRobot(Robocode.ScannedRobotEvent)">
            <summary>
            This method is called when your robot sees another robot, i.e. when the
            robot's radar scan "hits" another robot.
            You should override it in your robot if you want to be informed of this
            event. (Almost all robots should override this!)
            <p/>
            This event is automatically called if there is a robot in range of your
            radar.
            <p/>
            Note that the robot's radar can only see robot within the range defined
            by <see cref="F:Robocode.Rules.RADAR_SCAN_RADIUS"/> (1200 pixels).
            <p/>
            Also not that the bearing of the scanned robot is relative to your
            robot's heading.
            <p/>
            <example>
              <code>
              void OnScannedRobot(ScannedRobotEvent evnt)
              {
                  // Assuming radar and gun are aligned...
                  if (event.Distance &lt; 100)
                  {
                      Fire(3);
                  }
                  else
                  {
                      Fire(1);
                  }
              }
              </code>
            </example>
            <p/>
            <b>Note:</b><br/>
            The game assists Robots in firing, as follows:
            <ul>
            <li>If the gun and radar are aligned (and were aligned last turn),</li>
            <li>and the event is current,</li>
            <li>and you call Fire() before taking any other actions, Robot.Fire(double) will Fire directly at the robot.</li>
            </ul>
            <p/>
            In essence, this means that if you can see a robot, and it doesn't move,
            then Fire will hit it.
            <p/>
            AdvancedRobots will NOT be assisted in this manner, and are expected to
            examine the event to determine if <see cref="M:Robocode.Robot.Fire(System.Double)"/> would
            hit. (i.e. you are spinning your gun around, but by the time you get the
            event, your gun is 5 degrees past the robot).
            <seealso cref="T:Robocode.ScannedRobotEvent"/>
            <seealso cref="T:Robocode.Event"/>
            <seealso cref="F:Robocode.Rules.RADAR_SCAN_RADIUS"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnRobotDeath(Robocode.RobotDeathEvent)">
            <summary>
            This method is called when another robot dies.
            You should override it in your robot if you want to be informed of this
            event.
            <seealso cref="T:Robocode.RobotDeathEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents.OnWin(Robocode.WinEvent)">
            <summary>
            This method is called if your robot wins a battle.
            <p/>
            Your robot could perform a victory dance here! :-)
            <seealso cref="T:Robocode.DeathEvent"/>
            <seealso cref="T:Robocode.BattleEndedEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IBasicEvents2">
            <summary>
            First extended version of the <see cref="T:Robocode.RobotInterfaces.IBasicEvents"/> interface.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents2.OnBattleEnded(Robocode.BattleEndedEvent)">
            <summary>
            This method is called after end of the battle, even when the battle is aborted.
            You should override it in your robot if you want to be informed of this event.
            <p/>
            <example>
              <code>
              public void OnBattleEnded(BattleEndedEvent evnt)
              {
                  Out.WriteLine("The battle has ended");
              }
              </code>
            </example>
            <seealso cref="T:Robocode.BattleEndedEvent"/>
            <seealso cref="T:Robocode.WinEvent"/>
            <seealso cref="T:Robocode.DeathEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IBasicEvents3">
            <summary>
            Second extended version of the <see cref="T:Robocode.RobotInterfaces.IBasicEvents"/> interface.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IBasicEvents3.OnRoundEnded(Robocode.RoundEndedEvent)">
            <summary>
            This method is called after the end of a round.
            You should override it in your robot if you want to be informed of this event.
            <p/>
            <example>
              <code>
              public void OnRoundEnded(RoundEndedEvent event)
              {
                  Out.WriteLine("The round has ended");
              }
              </code>
            </example>
            <seealso cref="T:Robocode.RoundEndedEvent"/>
            <seealso cref="M:Robocode.RobotInterfaces.IBasicEvents2.OnBattleEnded(Robocode.BattleEndedEvent)"/>
            <seealso cref="T:Robocode.WinEvent"/>
            <seealso cref="T:Robocode.DeathEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
            <param name="evnt"></param>
        </member>
        <member name="T:Robocode.RobotInterfaces.IInteractiveEvents">
            <summary>
            An event interface for receiving interactive events with an <see cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>.
            <seealso cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyPressed(Robocode.KeyEvent)">
            <summary>
            This method is called when a key has been pressed.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            key events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyReleased(Robocode.KeyEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyTyped(Robocode.KeyEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyReleased(Robocode.KeyEvent)">
            <summary>
            This method is called when a key has been released.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            key events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyPressed(Robocode.KeyEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyTyped(Robocode.KeyEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyTyped(Robocode.KeyEvent)">
            <summary>
            This method is called when a key has been typed (pressed and released).
            <p/>
            See the Sample.Interactive robot for an example of how to use
            key events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyPressed(Robocode.KeyEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnKeyReleased(Robocode.KeyEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)">
            <summary>
            This method is called when a mouse button has been clicked (pressed and
            released).
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)">
            <summary>
            This method is called when the mouse has entered the battle view.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)">
            <summary>
            This method is called when the mouse has exited the battle view.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)">
            <summary>
            This method is called when a mouse button has been pressed.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)">
            <summary>
            This method is called when a mouse button has been released.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)">
            <summary>
            This method is called when the mouse has been moved.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)">
            <summary>
            This method is called when a mouse button has been pressed and then
            dragged.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)">
            <summary>
            This method is called when the mouse wheel has been rotated.
            <p/>
            See the Sample.Interactive robot for an example of how to use
            mouse events.
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseMoved(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMousePressed(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseReleased(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseClicked(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseEntered(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseExited(Robocode.MouseEvent)"/>
            <seealso cref="M:Robocode.RobotInterfaces.IInteractiveEvents.OnMouseDragged(Robocode.MouseEvent)"/>
            </summary>
            <param name="evnt">Holds details about current event</param>
        </member>
        <member name="T:Robocode.RobotInterfaces.IInteractiveRobot">
            <summary>
            A robot interface for creating an interactive type of robot like
            <see cref="T:Robocode.Robot"/> and <see cref="T:Robocode.AdvancedRobot"/> that is able to
            receive interactive events from the keyboard or mouse.
            If a robot is directly inherited from this class it will behave as similar to
            a <see cref="T:Robocode.RobotInterfaces.IBasicRobot"/>. If you need it to behave similar to an
            <see cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/> or <see cref="T:Robocode.RobotInterfaces.ITeamRobot"/>, you should inherit from these
            interfaces instead, as these are inherited from this interface.
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IBasicRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IJuniorRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IInteractiveRobot.GetInteractiveEventListener">
            <summary>
            This method is called by the game to notify this robot about interactive
            events, i.e. keyboard and mouse events. Hence, this method must be
            implemented so it returns your <see cref="T:Robocode.RobotInterfaces.IInteractiveEvents"/> listener.
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IJuniorRobot">
            <summary>
            A robot interface for creating the most primitive robot type, which is a
            <see cref="T:Robocode.JuniorRobot"/>. A junior robot is simpler than the
            <see cref="T:Robocode.Robot"/> class.
            <p/>
            A junior robot has a simplified model, in purpose of teaching programming
            skills to inexperienced in programming students.
            The simplified robot model will keep player from overwhelming of Robocode's
            rules, programming syntax and programming concept.
            <p/>
            Instead of using getters and setters, public fields are provided for
            receiving information like the last scanned robot, the coordinate of the
            robot etc.
            <p/>
            All methods on a junior robot are blocking calls, i.e. they do not return
            before their action has been completed and will at least take one turn to
            Execute.
            <seealso cref="T:Robocode.JuniorRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IBasicRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IPaintEvents">
            <summary>
            An event interface for receiving paint events with an <see cref="T:Robocode.RobotInterfaces.IPaintRobot"/>.
            <seealso cref="T:Robocode.RobotInterfaces.IPaintRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IPaintEvents.OnPaint(Robocode.IGraphics)">
            <summary>
            This method is called every time the robot is painted. You should
            override this method if you want to draw items for your robot on the
            battle field, e.g. targets, virtual bullets etc.
            <p/>
            This method is very useful for debugging your robot.
            <p/>
            Note that the robot will only be painted if the "Paint" is enabled on the
            robot's console window; otherwise the robot will never get painted (the
            reason being that all robots might have graphical items that must be
            painted, and then you might not be able to tell what graphical items that
            have been painted for your robot).
            <p/>
            Also note that the coordinate system for the graphical context where you
            paint items fits for the Robocode coordinate system where (0, 0) is at
            the bottom left corner of the battlefield, where X is towards right and Y
            is upwards.
            <seealso cref="T:System.Drawing.Graphics"/>
            </summary>
            <param name="graphics">The graphics context to use for painting graphical items for the robot</param>
        </member>
        <member name="T:Robocode.RobotInterfaces.IPaintRobot">
            <summary>
            A robot interface that makes it possible for a robot to receive paint events.
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IPaintRobot.GetPaintEventListener">
            <summary>
            This method is called by the game to notify this robot about painting
            events. Hence, this method must be implemented so it returns your
            <see cref="T:Robocode.RobotInterfaces.IPaintEvents"/> listener.
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.IRunnable">
            <summary>
            Interface to anything what could run
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.IRunnable.Run">
            <summary>
            Robot main loop or anything what could run. 
            </summary>
        </member>
        <member name="T:Robocode.RobotInterfaces.ITeamEvents">
            <summary>
            An event interface for receiving robot team events with an <see cref="T:Robocode.RobotInterfaces.ITeamRobot"/>.
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.ITeamEvents.OnMessageReceived(Robocode.MessageEvent)">
            <summary>
            This method is called when your robot receives a message from a teammate.
            You should override it in your robot if you want to be informed of this
            event.
            <p/>
            <example>
              <code>
              public void OnMessageReceived(MessageEvent evnt)
              {
                  Out.WriteLine(event.Sender + " sent me: " + evnt.Message);
              }
              </code>
            </example>
            <seealso cref="T:Robocode.MessageEvent"/>
            <seealso cref="T:Robocode.Event"/>
            </summary>
            <param name="evnt">The message event sent by the game</param>
        </member>
        <member name="T:Robocode.RobotInterfaces.ITeamRobot">
            <summary>
            A robot interface for creating a team robot like <see cref="T:Robocode.TeamRobot"/>
            that is able to receive team events.
            A team robot is an advanced type of robot that supports sending messages
            between teammates that participates in a team.
            <seealso cref="T:Robocode.TeamRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IBasicRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IJuniorRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IInteractiveRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.IAdvancedRobot"/>
            <seealso cref="T:Robocode.RobotInterfaces.ITeamRobot"/>
            </summary>
        </member>
        <member name="M:Robocode.RobotInterfaces.ITeamRobot.GetTeamEventListener">
            <summary>
            This method is called by the game to notify this robot about team events.
            Hence, this method must be implemented so it returns your
            <see cref="T:Robocode.RobotInterfaces.ITeamEvents"/> listener.
            </summary>
        </member>
        <member name="T:Robocode.Util.Utils">
            <summary>
            Utility class that provide methods for normalizing angles.
            </summary>
        </member>
        <member name="M:Robocode.Util.Utils.NormalAbsoluteAngle(System.Double)">
            <summary>
            Normalizes an angle to an absolute angle.
            The normalized angle will be in the range from 0 to 2*PI, where 2*PI
            itself is not included.
            </summary>
            <param name="angle">the angle in radians to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.NormalAbsoluteAngleDegrees(System.Double)">
            <summary>
            Normalizes an angle to an absolute angle.
            The normalized angle will be in the range from 0 to 360, where 360
            itself is not included.
            </summary>
            <param name="angle">the angle in degrees to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.NormalRelativeAngle(System.Double)">
            <summary>
            Normalizes an angle to a relative angle.
            The normalized angle will be in the range from -PI to PI, where PI
            itself is not included.
            </summary>
            <param name="angle">the angle in radinas to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.NormalRelativeAngleDegrees(System.Double)">
            <summary>
            Normalizes an angle to a relative angle.
            The normalized angle will be in the range from -180 to 180, where 180
            itself is not included.
            </summary>
            <param name="angle">the angle to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.NormalNearAbsoluteAngleDegrees(System.Double)">
            <summary>
            Normalizes an angle to be near an absolute angle.
            The normalized angle will be in the range from 0 to 360, where 360
            itself is not included.
            If the normalized angle is near to 0, 90, 180, 270 or 360, that
            angle will be returned. The <see cref="M:Robocode.Util.Utils.IsNear(System.Double,System.Double)"/>
            method is used for defining when the angle is near one of angles listed
            above.
            <seealso cref="M:Robocode.Util.Utils.NormalAbsoluteAngle(System.Double)"/>
            <seealso cref="M:Robocode.Util.Utils.IsNear(System.Double,System.Double)"/>
            </summary>
            <param name="angle"> the angle to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.NormalNearAbsoluteAngle(System.Double)">
            <summary>
            Normalizes an angle to be near an absolute angle.
            The normalized angle will be in the range from 0 to 2*PI, where 2*PI
            itself is not included.
            If the normalized angle is near to 0, PI/2, PI, 3*PI/2 or 2*PI, that
            angle will be returned. The <see cref="M:Robocode.Util.Utils.IsNear(System.Double,System.Double)"/>
            method is used for defining when the angle is near one of angles listed
            above.
            <seealso cref="M:Robocode.Util.Utils.NormalAbsoluteAngle(System.Double)"/>
            <seealso cref="M:Robocode.Util.Utils.IsNear(System.Double,System.Double)"/>
            </summary>
            <param name="angle"> the angle to normalize</param>
        </member>
        <member name="M:Robocode.Util.Utils.IsNear(System.Double,System.Double)">
            <summary>
            Tests if the two double values are near to each other.
            It is recommended to use this method instead of testing if the two
            doubles are equal using an this expression: value1 == value2.
            The reason being, that this expression might never become
            true due to the precision of double values.
            Whether or not the specified doubles are near to each other is defined by
            the following expression:
            (Math.abs(value1 - value2) &lt; .00001)
            </summary>
            <param name="value1"> the first double value</param>
            <param name="value2"> the second double value</param>
        </member>
        <member name="M:Robocode.Util.Utils.GetRandom">
            <summary>
            Returns random number generator. It might be configured for repeatable behavior by setting -DRANDOMSEED option.
            </summary>
        </member>
        <member name="M:Robocode.Util.Utils.ToRadians(System.Double)">
            <summary>
            Conversion from degrees to radians 
            </summary>
            <param name="angle">in degrees</param>
            <returns>angle in radians</returns>
        </member>
        <member name="M:Robocode.Util.Utils.ToDegrees(System.Double)">
            <summary>
            Conversion from radians to degrees
            </summary>
            <param name="angle">in radians</param>
            <returns>angle in degrees</returns>
        </member>
        <member name="T:Robocode.AdvancedRobot">
            <summary>
              A more advanced type of robot than Robot that allows non-blocking calls,
              custom events, and writes to the filesystem.
              <p/>
              If you have not already, you should create a <see cref="T:Robocode.Robot"/> first.
              <br/><see href="http://robocode.sourceforge.net"/>
              <br/><see href="http://robocode.sourceforge.net/myfirstrobot/MyFirstRobot.html">
                Building your first robot
              </see>
             <seealso cref="T:Robocode.JuniorRobot"/>
             <seealso cref="T:Robocode.Robot"/>
             <seealso cref="T:Robocode.TeamRobot"/>
             <seealso cref="T:Robocode.RateControlRobot"/>
             <seealso cref="T:Robocode.IDroid"/>
             <seealso cref="T:Robocode.IBorderSentry"/>
            </summary>
        </member>
        <member name="T:Robocode.Robot">
             
            <summary>
              The basic robot class that you will extend to create your own robots.
              <p/>
              Please note the following standards will be used:
              <p/>
              heading - absolute angle in degrees with 0 facing up the screen,
              positive clockwise. 0 &lt;= heading &lt; 360.
              <p/>
              bearing - relative angle to some obj from your robot's heading,
              positive clockwise. -180 &lt; bearing &lt;= 180
              <p/>
              All coordinates are expressed as (x,y).
              All coordinates are positive.
              <p/>
              The origin (0,0) is at the bottom left of the screen.
              <p/>
              Positive X is right.
              Positive Y is up.
              <br/><see href="http://robocode.sourceforge.net"/>
              <br/><see href="http://robocode.sourceforge.net/myfirstrobot/MyFirstRobot.html">
                Building your first robot
              </see>
             <seealso cref="T:Robocode.JuniorRobot"/>
             <seealso cref="T:Robocode.AdvancedRobot"/>
             <seealso cref="T:Robocode.TeamRobot"/>
             <seealso cref="T:Robocode.RateControlRobot"/>
             <seealso cref="T:Robocode.IDroid"/>
             <seealso cref="T:Robocode.IBorderSentry"/>
            </summary>
        </member>
        <member name="M:Robocode.Robot.UninitializedException">
            <summary>
              Throws a RobotException.
              This method should be called when the robot's peer is uninitialized.
            </summary>
        </member>
        <member name="M:Robocode.Robot.Robocode#RobotInterfaces#IBasicRobot#GetRobotRunnable">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.GetRobotRunnable"/>
        </member>
        <member name="M:Robocode.Robot.Robocode#RobotInterfaces#IBasicRobot#GetBasicEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.GetBasicEventListener"/>
        </member>
        <member name="M:Robocode.Robot.Robocode#RobotInterfaces#IInteractiveRobot#GetInteractiveEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IInteractiveRobot.GetInteractiveEventListener"/>
        </member>
        <member name="M:Robocode.Robot.Robocode#RobotInterfaces#IPaintRobot#GetPaintEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IPaintRobot.GetPaintEventListener"/>
        </member>
        <member name="M:Robocode.Robot.Ahead(System.Double)">
             <summary>
               Immediately moves your robot ahead (forward) by distance measured in
               pixels.
               <p/>
               This call executes immediately, and does not return until it is complete,
               i.e. when the remaining distance to move is 0.
               <p/>
               If the robot collides with a wall, the move is complete, meaning that the
               robot will not move any further. If the robot collides with another
               robot, the move is complete if you are heading toward the other robot.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the robot is set to move backward
               instead of forward.
               <p/>
               <example>
                 <code>
                 // Move the robot 100 pixels forward
                 Ahead(100);
            
                 // Afterwards, move the robot 50 pixels backward
                 Ahead(-50);
                 </code>
               </example>
             </summary>
             <param name="distance">
               The distance to move ahead measured in pixels.
               If this value is negative, the robot will move back instead of ahead.
             </param>
             <seealso cref="M:Robocode.Robot.Back(System.Double)"/>
             <seealso cref="M:Robocode.Robot.OnHitWall(Robocode.HitWallEvent)"/>
             <seealso cref="M:Robocode.Robot.OnHitRobot(Robocode.HitRobotEvent)"/>
        </member>
        <member name="M:Robocode.Robot.Back(System.Double)">
             <summary>
               Immediately moves your robot backward by distance measured in pixels.
               <p/>
               This call executes immediately, and does not return until it is complete,
               i.e. when the remaining distance to move is 0.
               <p/>
               If the robot collides with a wall, the move is complete, meaning that the
               robot will not move any further. If the robot collides with another
               robot, the move is complete if you are heading toward the other robot.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the robot is set to move forward instead
               of backward.
               <p/>
               <example>
                 <code>
                 // Move the robot 100 pixels backward
                 Back(100);
            
                 // Afterwards, move the robot 50 pixels forward
                 Back(-50);
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.Ahead(System.Double)"/>
               <seealso cref="M:Robocode.Robot.OnHitWall(Robocode.HitWallEvent)"/>
               <seealso cref="M:Robocode.Robot.OnHitRobot(Robocode.HitRobotEvent)"/>
             </summary>
             <param name="distance">
               The distance to move back measured in pixels.
               If this value is negative, the robot will move ahead instead of back.
             </param>
        </member>
        <member name="M:Robocode.Robot.Run">
            <summary>
              The main method in every robot. You must override this to set up your
              robot's basic behavior.
              <p />
              <example>
                <code>
                // A basic robot that moves around in a square
                public void Run()
                {
                    while (true)
                    {
                        Ahead(100);
                        TurnRight(90);
                    }
                }
                </code>
              </example>
            </summary>
        </member>
        <member name="M:Robocode.Robot.TurnLeft(System.Double)">
             <summary>
               Immediately turns the robot's body to the left by degrees.
               <p/>
               This call executes immediately, and does not return until it is complete,
               i.e. when the angle remaining in the robot's turn is 0.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the robot's body is set to turn right
               instead of left.
               <p/>
               <example>
                 <code>
                   // Turn the robot 180 degrees to the left
                   TurnLeft(180);
            
                   // Afterwards, turn the robot 90 degrees to the right
                   TurnLeft(-90);
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
             </summary>
             <param name="degrees">
               The amount of degrees to turn the robot's body to the left.
               If degrees &gt; 0 the robot will turn left.
               If degrees &lt; 0 the robot will turn right.
               If degrees = 0 the robot will not turn, but execute.
             </param>
        </member>
        <member name="M:Robocode.Robot.TurnRight(System.Double)">
             
            <summary>
              Immediately turns the robot's body to the right by degrees.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the robot's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot 180 degrees to the right
                TurnRight(180);
            
                // Afterwards, turn the robot 90 degrees to the left
                TurnRight(-90);
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
            </summary>
            <param name="degrees">
              The amount of degrees to turn the robot's body to the right.
              If degrees &gt; 0 the robot will turn right.
              If degrees &lt; 0 the robot will turn left.
              If degrees = 0 the robot will not turn, but execute.
            </param>
        </member>
        <member name="M:Robocode.Robot.DoNothing">
            <summary>
              Do nothing this turn, meaning that the robot will skip it's turn.
              <p />
              This call executes immediately, and does not return until the turn is over.
            </summary>
        </member>
        <member name="M:Robocode.Robot.Fire(System.Double)">
            <summary>
              Immediately fires a bullet. The bullet will travel in the direction the
              gun is pointing.
              <p/>
              The specified bullet power is an amount of energy that will be taken from
              the robot's energy. Hence, the more power you want to spend on the
              bullet, the more energy is taken from your robot.
              <p/>
              The bullet will do (4 * power) damage if it hits another robot. If power
              is greater than 1, it will do an additional 2 * (power - 1) damage.
              You will get (3 * power) back if you hit the other robot. You can call
              <see cref="M:Robocode.Rules.GetBulletDamage(System.Double)"/>
              for getting the damage that a
              bullet with a specific bullet power will do.
              <p/>
              The specified bullet power should be between <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/>
              and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
              <p/>
              Note that the gun cannot Fire if the gun is overheated, meaning that
              <see cref="P:Robocode.Robot.GunHeat"/>
              returns a value &gt; 0.
              <p/>
              A event is generated when the bullet hits a robot (<see cref="T:Robocode.BulletHitEvent"/>),
              wall (<see cref="T:Robocode.BulletMissedEvent"/>), or another bullet
              (<see cref="T:Robocode.BulletHitBulletEvent"/>).
              <p/>
              <example>
                <code>
                // Fire a bullet with maximum power if the gun is ready
                if (GetGunHeat() == 0)
                {
                    Fire(Rules.MAX_BULLET_POWER);
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
              <seealso cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
            </summary>
            <param name="power">
              The amount of energy given to the bullet, and subtracted from the robot's energy.
            </param>
        </member>
        <member name="M:Robocode.Robot.FireBullet(System.Double)">
             
            <summary>
              Immediately fires a bullet. The bullet will travel in the direction the
              gun is pointing.
              <p/>
              The specified bullet power is an amount of energy that will be taken from
              the robot's energy. Hence, the more power you want to spend on the
              bullet, the more energy is taken from your robot.
              <p/>
              The bullet will do (4 * power) damage if it hits another robot. If power
              is greater than 1, it will do an additional 2 * (power - 1) damage.
              You will get (3 * power) back if you hit the other robot. You can call
              <see cref="M:Robocode.Rules.GetBulletDamage(System.Double)"/>
              for getting the damage that a
              bullet with a specific bullet power will do.
              <p/>
              The specified bullet power should be between <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/>
              and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
              <p/>
              Note that the gun cannot Fire if the gun is overheated, meaning that
              <see cref="P:Robocode.Robot.GunHeat"/> returns a value &gt; 0.
              <p/>
              A event is generated when the bullet hits a robot (<see cref="T:Robocode.BulletHitEvent"/>),
              wall (<see cref="T:Robocode.BulletMissedEvent"/>), or another bullet
              (<see cref="T:Robocode.BulletHitBulletEvent"/>).
              <p/>
              <example>
                <code>
                // Fire a bullet with maximum power if the gun is ready
                if (GetGunHeat() == 0)
                {
                    Bullet bullet = FireBullet(Rules.MAX_BULLET_POWER);
            
                    // Get the velocity of the bullet
                    if (bullet != null)
                    {
                        double bulletVelocity = bullet.Velocity;
                    }
                }
                </code>
              </example>
              Returns a
              <see cref="T:Robocode.Bullet"/>
              That contains information about the bullet if it  was actually fired,
              which can be used for tracking the bullet after it has been fired.
              If the bullet was not fired, null is returned.
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="T:Robocode.Bullet"/>
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
              <seealso cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
            </summary>
            <param name="power">
              power the amount of energy given to the bullet, and subtracted from the robot's energy.
            </param>
        </member>
        <member name="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnDeath(Robocode.DeathEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnHitByBullet(Robocode.HitByBulletEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnHitRobot(Robocode.HitRobotEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnHitWall(Robocode.HitWallEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnRobotDeath(Robocode.RobotDeathEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnWin(Robocode.WinEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnRoundEnded(Robocode.RoundEndedEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnBattleEnded(Robocode.BattleEndedEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.Scan">
             
            <summary>
              Scans for other robots. This method is called automatically by the game,
              as long as the robot is moving, turning its body, turning its gun, or
              turning its radar.
              <p/>
              Scan will cause <see cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
              to be called if you see a robot.
              <p/>
              There are 2 reasons to call <see cref="M:Robocode.Robot.Scan"/> manually:
              <ol>
                <li>
                  You want to scan after you stop moving.
                </li>
                <li>
                  You want to interrupt the <see cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
                  event. This is more likely. If you are in
                  <see cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/> and call
                  <see cref="M:Robocode.Robot.Scan"/>, and you still see a robot, then the system will interrupt your
                  <see cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>  event immediately and start it
                  from the top.
                </li>
              </ol>
              <p/>
              This call executes immediately.
              <seealso cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
              <seealso cref="T:Robocode.ScannedRobotEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
             <summary>
               Sets the color of the robot's body, gun, and radar in the same time.
               <p/>
               You may only call this method one time per battle. A <em>null</em>
               indicates the default (blue) color.
               <p/>
               <example>
                 <code>
                 // Don't forget to using System.Drawing at the top...
                 using System.Drawing;
                 ...
            
                 public void Run()
                 {
                     SetColors(null, Color.Red, Color.fromArgb(150, 0, 150));
                     ...
                 }
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
               <seealso cref="P:Robocode.Robot.BodyColor"/>
               <seealso cref="P:Robocode.Robot.GunColor"/>
               <seealso cref="P:Robocode.Robot.RadarColor"/>
               <seealso cref="P:Robocode.Robot.BulletColor"/>
               <seealso cref="P:Robocode.Robot.ScanColor"/>
               <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="bodyColor">The new body color</param>
             <param name="gunColor">The new gun color</param>
             <param name="radarColor">The new radar color</param>
        </member>
        <member name="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
             <summary>
               Sets the color of the robot's body, gun, radar, bullet, and scan arc in
               the same time.
               <p/>
               You may only call this method one time per battle. A <em>null</em>
               indicates the default (blue) color for the body, gun, radar, and scan
               arc, but white for the bullet color.
               <p/>
               <example>
                 <code>
                 // Don't forget to using System.Drawing at the top...
                 using System.Drawing;
                 ...
            
                 public void Run()
                 {
                     SetColors(null, Color.Red, Color.Greeen, null, Color.fromArgb(150, 0, 150));
                     ...
                 }
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
               <seealso cref="P:Robocode.Robot.BodyColor"/>
               <seealso cref="P:Robocode.Robot.GunColor"/>
               <seealso cref="P:Robocode.Robot.RadarColor"/>
               <seealso cref="P:Robocode.Robot.BulletColor"/>
               <seealso cref="P:Robocode.Robot.ScanColor"/>
               <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="bodyColor">The new body color</param>
             <param name="gunColor">The new gun color</param>
             <param name="radarColor">The new radar color</param>
             <param name="bulletColor">The new bullet color</param>
             <param name="scanArcColor">The new scan arc color</param>
        </member>
        <member name="M:Robocode.Robot.SetAllColors(System.Drawing.Color)">
             <summary>
               Sets all the robot's color to the same color in the same time, i.e. the
               color of the body, gun, radar, bullet, and scan arc.
               <p/>
               You may only call this method one time per battle. A <em>null</em>
               indicates the default (blue) color for the body, gun, radar, and scan
               arc, but white for the bullet color.
               <p/>
               <example>
                 <code>
                 // Don't forget to using System.Drawing at the top...
                 using System.Drawing;
                 ...
            
                 public void Run()
                 {
                     SetAllColors(Color.Red);
                     ...
                 }
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="P:Robocode.Robot.BodyColor"/>
               <seealso cref="P:Robocode.Robot.GunColor"/>
               <seealso cref="P:Robocode.Robot.RadarColor"/>
               <seealso cref="P:Robocode.Robot.BulletColor"/>
               <seealso cref="P:Robocode.Robot.ScanColor"/>
               <seealso cref="T:System.Drawing.Color"/>
             </summary>
             <param name="color">The new color for all the colors of the robot</param>
        </member>
        <member name="M:Robocode.Robot.Stop">
             
            <summary>
              Immediately stops all movement, and saves it for a call to <see cref="M:Robocode.Robot.Resume"/>.
              If there is already movement saved from a previous stop, this will have no effect.
              <p/>
              This method is equivalent to <see cref="M:Robocode.Robot.Stop(System.Boolean)">Stop(false)</see>.
              <seealso cref="M:Robocode.Robot.Resume"/>
              <seealso cref="M:Robocode.Robot.Stop(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Robocode.Robot.Stop(System.Boolean)">
            <summary>
              Immediately stops all movement, and saves it for a call to <see cref="M:Robocode.Robot.Resume"/>.
              If there is already movement saved from a previous stop, you can overwrite it by
              calling <see cref="M:Robocode.Robot.Stop(System.Boolean)">Stop(true)</see>.
              <seealso cref="M:Robocode.Robot.Resume"/>
              <seealso cref="M:Robocode.Robot.Stop"/>
            </summary>
            <param name="overwrite">
              If there is already movement saved from a previous stop, you can overwrite it by
              calling <see cref="M:Robocode.Robot.Stop(System.Boolean)">Stop(true)</see>.
            </param>
        </member>
        <member name="M:Robocode.Robot.Resume">
            <summary>
              Immediately resumes the movement you stopped by <see cref="M:Robocode.Robot.Stop"/>, if any.
              <p/>
              This call executes immediately, and does not return until it is complete.
              <seealso cref="M:Robocode.Robot.Stop"/>
              <seealso cref="M:Robocode.Robot.Stop(System.Boolean)"/>
            </summary>
        </member>
        <member name="M:Robocode.Robot.TurnGunLeft(System.Double)">
             
            <summary>
              Immediately turns the robot's gun to the left by degrees.
              <p/>
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the gun's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Turn the robot's gun 180 degrees to the left
                TurnGunLeft(180);
            
                // Afterwards, turn the robot's gun 90 degrees to the right
                TurnGunLeft(-90);
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
            <param name="degrees">
              The amount of degrees to turn the robot's gun to the left.
              If degrees &gt; 0 the robot's gun will turn left.
              If degrees &lt; 0 the robot's gun will turn right.
              If degrees = 0 the robot's gun will not turn, but execute.
            </param>
        </member>
        <member name="M:Robocode.Robot.TurnGunRight(System.Double)">
             
            <summary>
              Immediately turns the robot's gun to the right by degrees.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the gun's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot's gun 180 degrees to the right
                TurnGunRight(180);
            
                // Afterwards, turn the robot's gun 90 degrees to the left
                TurnGunRight(-90);
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
            <param name="degrees">
              The amount of degrees to turn the robot's gun to the right.
              If degrees &gt; 0 the robot's gun will turn right.
              If degrees &lt; 0 the robot's gun will turn left.
              If degrees = 0 the robot's gun will not turn, but execute.
            </param>
        </member>
        <member name="M:Robocode.Robot.TurnRadarLeft(System.Double)">
             <summary>
               Immediately turns the robot's radar to the left by degrees.
               <p/>
               This call executes immediately, and does not return until it is complete,
               i.e. when the angle remaining in the radar's turn is 0.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the robot's radar is set to turn right
               instead of left.
               <p/>
               <example>
                 <code>
                 // Turn the robot's radar 180 degrees to the left
                 TurnRadarLeft(180);
            
                 // Afterwards, turn the robot's radar 90 degrees to the right
                 TurnRadarLeft(-90);
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
               <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
               <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
               <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
             </summary>
             <param name="degrees">
               The amount of degrees to turn the robot's radar to the left.
               If degrees &gt; 0 the robot's radar will turn left.
               If degrees &lt; 0 the robot's radar will turn right.
               If degrees = 0 the robot's radar will not turn, but execute.
             </param>
        </member>
        <member name="M:Robocode.Robot.TurnRadarRight(System.Double)">
             
            <summary>
              Immediately turns the robot's radar to the right by degrees.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the radar's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot's radar 180 degrees to the right
                TurnRadarRight(180);
            
                // Afterwards, turn the robot's radar 90 degrees to the left
                TurnRadarRight(-90);
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
            <param name="degrees">
              The amount of degrees to turn the robot's radar to the right.
              If degrees &gt; 0 the robot's radar will turn right.
              If degrees &lt; 0 the robot's radar will turn left.
              If degrees = 0 the robot's radar will not turn, but execute.
            </param>
        </member>
        <member name="M:Robocode.Robot.OnPaint(Robocode.IGraphics)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnKeyPressed(Robocode.KeyEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnKeyReleased(Robocode.KeyEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnKeyTyped(Robocode.KeyEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseClicked(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseEntered(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseExited(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMousePressed(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseReleased(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseMoved(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseDragged(Robocode.MouseEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.Robot.OnStatus(Robocode.StatusEvent)">
            <inheritdoc />
        </member>
        <member name="P:Robocode.Robot.Out">
            <summary>
              The Out stream your robot should use to print.
              <p />
              You can view the print-outs by clicking the button for your robot in the
              right side of the battle window.
              <p />
              <example>
                <code>
                // Print Out a line each time my robot hits another robot
                public void OnHitRobot(HitRobotEvent e)
                {
                    Out.WriteLine("I hit a robot!  My energy: " + Energy + " his energy: " + e.Energy);
                }
                </code>
              </example>
            </summary>
        </member>
        <member name="P:Robocode.Robot.BattleFieldWidth">
            <summary>
              Returns the width of the current battlefield measured in pixels.
            </summary>
        </member>
        <member name="P:Robocode.Robot.BattleFieldHeight">
            <summary>
              Returns the height of the current battlefield measured in pixels.
            </summary>
        </member>
        <member name="P:Robocode.Robot.Heading">
            <summary>
              Returns the direction that the robot's body is facing, in degrees.
              The value returned will be between 0 and 360 (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              90 means East, 180 means South, and 270 means West.
              <seealso cref="P:Robocode.Robot.GunHeading"/>
              <seealso cref="P:Robocode.Robot.RadarHeading"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Height">
            <summary>
              Returns the height of the robot measured in pixels.
              <seealso cref="P:Robocode.Robot.Width"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Width">
            <summary>
              Returns the width of the robot measured in pixels.
              <seealso cref="P:Robocode.Robot.Height"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Name">
            <summary>
              Returns the robot's name.
            </summary>
        </member>
        <member name="P:Robocode.Robot.X">
            <summary>
              Returns the X position of the robot. (0,0) is at the bottom left of the battlefield.
              <seealso cref="P:Robocode.Robot.Y"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Y">
            <summary>
              Returns the Y position of the robot. (0,0) is at the bottom left of the battlefield.
              <seealso cref="P:Robocode.Robot.X"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.GunCoolingRate">
            <summary>
              Returns the rate at which the gun will cool down, i.e. the amount of heat
              the gun heat will drop per turn.
              <p/>
              The gun cooling rate is default 0.1 / turn, but can be changed by the
              battle setup. So don't count on the cooling rate being 0.1!
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.GunHeading">
            <summary>
              Returns the direction that the robot's gun is facing, in degrees.
              The value returned will be between 0 and 360 (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              90 means East, 180 means South, and 270 means West.
              <seealso cref="P:Robocode.Robot.Heading"/>
              <seealso cref="P:Robocode.Robot.RadarHeading"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.GunHeat">
            <summary>
              Returns the current heat of the gun. The gun cannot Fire unless this is
              0. (Calls to Fire will succeed, but will not actually Fire unless
              GetGunHeat() == 0).
              <p/>
              The amount of gun heat generated when the gun is fired is 1 + (firePower / 5).
              Each turn the gun heat drops by the amount returned   by <see cref="P:Robocode.Robot.GunCoolingRate"/>,
              which is a battle setup.
              <p/>
              Note that all guns are "hot" at the start of each round, where the gun heat is 3.
              <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.NumRounds">
            <summary>
              Returns the number of rounds in the current battle.
              <seealso cref="P:Robocode.Robot.RoundNum"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.SentryBorderSize">
            <summary>
              Returns the sentry border size for a <see cref="!:Robocode.BorderSentry">BorderSentry</see> that defines the how
              far a BorderSentry is allowed to move from the border edges measured in units.<br/>
              Hence, the sentry border size defines the width/range of the border area surrounding the battlefield that
              BorderSentrys cannot leave (sentry robots robots must stay in the border area), but it also define the
              distance from the border edges where BorderSentrys are allowed/able to make damage to robots entering this
              border area.
            </summary>
        </member>
        <member name="P:Robocode.Robot.Others">
            <summary>
              Returns how many opponents that are left in the current round.
            </summary>
        </member>
        <member name="P:Robocode.Robot.NumSentries">
            <summary>
              Returns how many sentry robots that are left in the current round.
            </summary>
        </member>
        <member name="P:Robocode.Robot.RadarHeading">
            <summary>
              Returns the direction that the robot's radar is facing, in degrees.
              The value returned will be between 0 and 360 (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              90 means East, 180 means South, and 270 means West.
              <seealso cref="P:Robocode.Robot.Heading"/>
              <seealso cref="P:Robocode.Robot.GunHeading"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.RoundNum">
            <summary>
              Returns the current round number (0 to <see cref="P:Robocode.Robot.NumRounds"/> - 1) of the battle.
              <seealso cref="P:Robocode.Robot.NumRounds"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Time">
            <summary>
              Returns the game time of the current round, where the time is equal to
              the current turn in the round.
              <p />
              A battle consists of multiple rounds.
              <p />
              Time is reset to 0 at the beginning of every round.
            </summary>
        </member>
        <member name="P:Robocode.Robot.Velocity">
            <summary>
              Returns the velocity of the robot measured in pixels/turn.
              <p/>
              The maximum velocity of a robot is defined by <see cref="F:Robocode.Rules.MAX_VELOCITY"/>
              (8 pixels / turn).
              <seealso cref="F:Robocode.Rules.MAX_VELOCITY"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.IsAdjustGunForRobotTurn">
            <summary>
              Sets the gun to turn independent from the robot's turn.
              <p/>
              Ok, so this needs some explanation: The gun is mounted on the robot's
              body. So, normally, if the robot turns 90 degrees to the right, then the
              gun will turn with it as it is mounted on top of the robot's body. To
              compensate for this, you can call
              <see cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>.
              When this is set, the gun will turn independent from the robot's turn,
              i.e. the gun will compensate for the robot's body turn.
              <p/>
              Note: This method is additive until you reach the maximum the gun can
              turn. The "adjust" is added to the amount you set for turning the robot,
              then capped by the physics of the game. If you turn infinite, then the
              adjust is ignored (and hence overridden).
              <p/>
            <example>
              Assuming both the robot and gun start Out facing up (0 degrees):
              <code>
              // Set gun to turn with the robot's turn
              SetAdjustGunForRobotTurn(false); // This is the default
              TurnRight(90);
              // At this point, both the robot and gun are facing right (90 degrees)
              TurnLeft(90);
              // Both are back to 0 degrees
              </code>
              -- or --
              <code>
              // Set gun to turn independent from the robot's turn
              SetAdjustGunForRobotTurn(true);
              TurnRight(90);
              // At this point, the robot is facing right (90 degrees), but the gun is still facing up.
              TurnLeft(90);
              // Both are back to 0 degrees.
              </code>
            </example>
              <p/>
              Note: The gun compensating this way does count as "turning the gun".
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.IsAdjustRadarForRobotTurn">
            <summary>
              Sets the radar to turn independent from the robot's turn.
              <p/>
              Ok, so this needs some explanation: The radar is mounted on the gun, and
              the gun is mounted on the robot's body. So, normally, if the robot turns
              90 degrees to the right, the gun turns, as does the radar. Hence, if the
              robot turns 90 degrees to the right, then the gun and radar will turn
              with it as the radar is mounted on top of the gun. To compensate for
              this, you can call <see cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/> = true.
              When this is set, the radar will turn independent from the robot's turn,
              i.e. the radar will compensate for the robot's turn.
              <p/>
              Note: This method is additive until you reach the maximum the radar can
              turn. The "adjust" is added to the amount you set for turning the robot,
              then capped by the physics of the game. If you turn infinite, then the
              adjust is ignored (and hence overridden).
              <p/>
            <example>
              Assuming the robot, gun, and radar all start Out facing up (0
              degrees):
              <code>
              // Set radar to turn with the robots's turn
              SetAdjustRadarForRobotTurn(false); // This is the default
              TurnRight(90);
              // At this point, the body, gun, and radar are all facing right (90 degrees);
              </code>
              -- or --
              <code>
              // Set radar to turn independent from the robot's turn
              SetAdjustRadarForRobotTurn(true);
              TurnRight(90);
              // At this point, the robot and gun are facing right (90 degrees), but the radar is still facing up.
              </code>
            </example>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.IsAdjustRadarForGunTurn">
            <summary>
              Sets the radar to turn independent from the gun's turn.
              <p/>
              Ok, so this needs some explanation: The radar is mounted on the robot's
              gun. So, normally, if the gun turns 90 degrees to the right, then the
              radar will turn with it as it is mounted on top of the gun. To compensate
              for this, you can call <see cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/> = (true).
              When this is set, the radar will turn independent from the robot's turn,
              i.e. the radar will compensate for the gun's turn.
              <p/>
              Note: This method is additive until you reach the maximum the radar can
              turn. The "adjust" is added to the amount you set for turning the gun,
              then capped by the physics of the game. If you turn infinite, then the
              adjust is ignored (and hence overridden).
              <p/>
            <example>
              Assuming both the gun and radar start Out facing up (0 degrees):
              <code>
              // Set radar to turn with the gun's turn
              SetAdjustRadarForGunTurn(false); // This is the default
              TurnGunRight(90);
              // At this point, both the radar and gun are facing right (90 degrees);
              </code>
              -- or --
              <code>
              // Set radar to turn independent from the gun's turn
              SetAdjustRadarForGunTurn(true);
              TurnGunRight(90);
              // At this point, the gun is facing right (90 degrees), but the radar is still facing up.
              </code>
            </example>
              Note: Calling <see cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/> will automatically call
              <see cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/> with the same value, unless you have
              already called it earlier. This behavior is primarily for backward compatibility
              with older Robocode robots.
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.BodyColor">
             <summary>
               Sets the color of the robot's body.
               <p/>
               A <em>null</em> indicates the default (blue) color.
               <p/>
               <example>
                 <code>
                 // Don't forget to using System.Drawing at the top...
                 using System.Drawing;
                 ...
            
                 public void Run()
                 {
                     SetBodyColor(Color.Black);
                     ...
                 }
                 </code>
               </example>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
               <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
               <seealso cref="P:Robocode.Robot.GunColor"/>
               <seealso cref="P:Robocode.Robot.RadarColor"/>
               <seealso cref="P:Robocode.Robot.BulletColor"/>
               <seealso cref="P:Robocode.Robot.ScanColor"/>
               <seealso cref="T:System.Drawing.Color"/>
             </summary>
        </member>
        <member name="P:Robocode.Robot.GunColor">
             
            <summary>
              Sets the color of the robot's gun.
              <p/>
              A <em>null</em> indicates the default (blue) color.
              <p/>
              <example>
                <code>
                // Don't forget to using System.Drawing at the top...
                using System.Drawing;
                ...
            
                public void Run()
                {
                    SetGunColor(Color.Red);
                    ...
                }
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
              <seealso cref="P:Robocode.Robot.BodyColor"/>
              <seealso cref="P:Robocode.Robot.RadarColor"/>
              <seealso cref="P:Robocode.Robot.BulletColor"/>
              <seealso cref="P:Robocode.Robot.ScanColor"/>
              <seealso cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.RadarColor">
             
            <summary>
              Sets the color of the robot's radar.
              <p/>
              A <em>null</em> indicates the default (blue) color.
              <p/>
              <example>
                <code>
                // Don't forget to using System.Drawing at the top...
                using System.Drawing;
                ...
            
                public void Run()
                {
                    SetRadarColor(Color.Yellow);
                    ...
                }
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
              <seealso cref="P:Robocode.Robot.BodyColor"/>
              <seealso cref="P:Robocode.Robot.GunColor"/>
              <seealso cref="P:Robocode.Robot.BulletColor"/>
              <seealso cref="P:Robocode.Robot.ScanColor"/>
              <seealso cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.BulletColor">
             
            <summary>
              Sets the color of the robot's bullets.
              <p/>
              A <em>null</em> indicates the default white color.
              <p/>
              <example>
                <code>
                // Don't forget to using System.Drawing at the top...
                using System.Drawing;
                ...
            
                public void Run()
                {
                    SetBulletColor(Color.Green);
                    ...
                }
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
              <seealso cref="P:Robocode.Robot.BodyColor"/>
              <seealso cref="P:Robocode.Robot.GunColor"/>
              <seealso cref="P:Robocode.Robot.RadarColor"/>
              <seealso cref="P:Robocode.Robot.ScanColor"/>
              <seealso cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.ScanColor">
             
            <summary>
              Sets the color of the robot's scan arc.
              <p/>
              A <em>null</em> indicates the default (blue) color.
              <p/>
              <example>
                <code>
                // Don't forget to using System.Drawing at the top...
                using System.Drawing;
                ...
            
                public void Run()
                {
                    SetScanColor(Color.White);
                    ...
                }
                </code>
              </example>
            
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetColors(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)"/>
              <seealso cref="M:Robocode.Robot.SetAllColors(System.Drawing.Color)"/>
              <seealso cref="P:Robocode.Robot.BodyColor"/>
              <seealso cref="P:Robocode.Robot.GunColor"/>
              <seealso cref="P:Robocode.Robot.RadarColor"/>
              <seealso cref="P:Robocode.Robot.BulletColor"/>
              <seealso cref="T:System.Drawing.Color"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.Energy">
            <summary>
              Returns the robot's current energy.
            </summary>
        </member>
        <member name="P:Robocode.Robot.Graphics">
            <summary>
              Returns a graphics context used for painting graphical items for the robot.
              <p/>
              This method is very useful for debugging your robot.
              <p/>
              Note that the robot will only be painted if the "Paint" is enabled on the
              robot's console window; otherwise the robot will never get painted (the
              reason being that all robots might have graphical items that must be
              painted, and then you might not be able to tell what graphical items that
              have been painted for your robot).
              <p/>
              Also note that the coordinate system for the graphical context where you
              paint items fits for the Robocode coordinate system where (0, 0) is at
              the bottom left corner of the battlefield, where X is towards right and Y
              is upwards.
              <seealso cref="M:Robocode.Robot.OnPaint(Robocode.IGraphics)"/>
            </summary>
        </member>
        <member name="P:Robocode.Robot.DebugProperty">
            <summary>
              Sets the debug property with the specified key to the specified value.
              <p />
              This method is very useful when debugging or reviewing your robot as you
              will be able to see this property displayed in the robot console for your
              robots under the Debug Properties tab page.
            </summary>
        </member>
        <member name="T:Robocode.Robot.DebugPropertyH">
            <summary>
            Container class for debug properties
            </summary>
        </member>
        <member name="P:Robocode.Robot.DebugPropertyH.Item(System.String)">
            <summary>
              Set the new value of the debug property, where null or
              the empty string is used for removing this debug property.
            </summary>
            <param name="key">
              The name/key of the debug property
            </param>
            <returns></returns>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetAhead(System.Double)">
             <summary>
               Sets the robot to move ahead (forward) by distance measured in 
               pixels when the next execution takes place.
               <p/>
               This call returns immediately, and will not execute until you 
               call <see cref="M:Robocode.AdvancedRobot.Execute"/> or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input, 
               where positive values means that the robot is set to move ahead, and negative 
               values means that the robot is set to move back. If 0 is given as input, the 
               robot will stop its movement, but will have to decelerate till it stands still, 
               and will thus not be able to stop its movement immediately, but eventually.
             </summary>
             <param name="distance">
               The distance to move measured in pixels.
               If distance &gt; 0 the robot is set to move ahead.
               If distance &lt; 0 the robot is set to move back.
               If distance = 0 the robot is set to stop its movement.
             </param>
             <example>
               <code>
               // Set the robot to move 50 pixels ahead
               SetAhead(50);
            
               // Set the robot to move 100 pixels back
               // (overrides the previous order)
               SetAhead(-100);
            
               ...
               // Executes the last SetAhead()
               Execute();
               </code>
             </example>
             <seealso cref="M:Robocode.Robot.Ahead(System.Double)"/>
             <seealso cref="M:Robocode.Robot.Back(System.Double)"/>
             <seealso cref="M:Robocode.AdvancedRobot.SetBack(System.Double)"/>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetBack(System.Double)">
            <summary>
              Sets the robot to move back by distance measured in pixels when the next
              execution takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              <see cref="M:Robocode.AdvancedRobot.Execute"/> or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input, where
              positive values means that the robot is set to move back, and negative
              values means that the robot is set to move ahead. If 0 is given as input,
              the robot will stop its movement, but will have to decelerate
              till it stands still, and will thus not be able to stop its movement
              immediately, but eventually.
              <p/>
              <example>
                <code>
                // Set the robot to move 50 pixels back
                SetBack(50);
            
                // Set the robot to move 100 pixels ahead
                // (overrides the previous order)
                SetBack(-100);
            
                ...
                // Executes the last SetBack()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.Back(System.Double)"/>
              <seealso cref="M:Robocode.Robot.Ahead(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>
            </summary>
             <param name="distance">
               The distance to move measured in pixels.
               If distance &gt; 0 the robot is set to move back.
               If distance &lt; 0 the robot is set to move ahead.
               If distance = 0 the robot is set to stop its movement.
             </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)">
            <summary>
              Sets the robot's body to turn left by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the robot to turn 180 degrees to the left
                SetTurnLeft(180);
            
                // Set the robot to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnLeft(-90);
            
                ...
                // Executes the last SetTurnLeft()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRightRadians(System.Double)"/>
            </summary>
              <param name="degrees">
                The amount of degrees to turn the robot's body to the left.
                If degrees &gt; 0 the robot is set to turn left.
                If degrees &lt; 0 the robot is set to turn right.
                If degrees = 0 the robot is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)">
            <summary>
              Sets the robot's body to turn right by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the robot to turn 180 degrees to the right
                SetTurnRight(180);
            
                // Set the robot to turn 90 degrees to the left instead of right
                // (overrides the previous order)
                SetTurnRight(-90);
            
                ...
                // Executes the last SetTurnRight()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeftRadians(System.Double)"/>
            </summary>
              <param name="degrees">
                The amount of degrees to turn the robot's body to the right.
                If degrees &gt; 0 the robot is set to turn right.
                If degrees &lt; 0 the robot is set to turn left.
                If degrees = 0 the robot is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetFire(System.Double)">
            <summary>
              Sets the gun to Fire a bullet when the next execution takes place.
              The bullet will travel in the direction the gun is pointing.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              The specified bullet power is an amount of energy that will be taken from
              the robot's energy. Hence, the more power you want to spend on the
              bullet, the more energy is taken from your robot.
              <p/>
              The bullet will do (4 * power) damage if it hits another robot. If power
              is greater than 1, it will do an additional 2 * (power - 1) damage.
              You will get (3 * power) back if you hit the other robot. You can call
              Rules.GetBulletDamage(double)} for getting the damage that a
              bullet with a specific bullet power will do.
              <p/>
              The specified bullet power should be between
              <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/> and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
              <p/>
              Note that the gun cannot Fire if the gun is overheated, meaning that
              <see cref="P:Robocode.Robot.GunHeat"/> returns a value &gt; 0.
              <p/>
              An event is generated when the bullet hits a robot, wall, or another
              bullet.
              <p/>
              <example>
                <code>
                // Fire a bullet with maximum power if the gun is ready
                if (GunGeat == 0)
                {
                    SetFire(Rules.MAX_BULLET_POWER);
                }
                ...
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetFireBullet(System.Double)"/>
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
              <seealso cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
            </summary>
              <param name="power">
                The amount of energy given to the bullet, and subtracted from the robot's energy.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetFireBullet(System.Double)">
            <summary>
              Sets the gun to Fire a bullet when the next execution takes place.
              The bullet will travel in the direction the gun is pointing.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              The specified bullet power is an amount of energy that will be taken from
              the robot's energy. Hence, the more power you want to spend on the
              bullet, the more energy is taken from your robot.
              <p/>
              The bullet will do (4 * power) damage if it hits another robot. If power
              is greater than 1, it will do an additional 2 * (power - 1) damage.
              You will get (3 * power) back if you hit the other robot. You can call
              <see cref="M:Robocode.Rules.GetBulletDamage(System.Double)"/> for getting the damage that a
              bullet with a specific bullet power will do.
              <p/>
              The specified bullet power should be between
              <see cref="F:Robocode.Rules.MIN_BULLET_POWER"/> and <see cref="F:Robocode.Rules.MAX_BULLET_POWER"/>.
              <p/>
              Note that the gun cannot Fire if the gun is overheated, meaning that
              <see cref="P:Robocode.Robot.GunHeat"/> returns a value &gt; 0.
              <p/>
              An event is generated when the bullet hits a robot
              (<see cref="T:Robocode.BulletHitEvent"/>), wall (<see cref="T:Robocode.BulletMissedEvent"/>), or another
              bullet (<see cref="T:Robocode.BulletHitBulletEvent"/>).
              <p/>
              <example>
                <code>
                Bullet bullet = null;
            
                // Fire a bullet with maximum power if the gun is ready
                if (GunHeat == 0)
                {
                    bullet = SetFireBullet(Rules.MAX_BULLET_POWER);
                }
                ...
                Execute();
                ...
                // Get the velocity of the bullet
                if (bullet != null)
                {
                    double bulletVelocity = bullet.Velocity;
                }
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetFire(System.Double)"/>
              <seealso cref="T:Robocode.Bullet"/>
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
              <seealso cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              <seealso cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
            </summary>
              <param name="power">
                The amount of energy given to the bullet, and subtracted from the robot's
                energy.
              </param>
              Returns a <see cref="T:Robocode.Bullet"/> that contains information about the bullet if it
              was actually fired, which can be used for tracking the bullet after it
              has been fired. If the bullet was not fired, null is returned.
        </member>
        <member name="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)">
            <summary>
              Registers a custom event to be called when a condition is met.
              When you are finished with your condition or just want to remove it you
              must call <see cref="M:Robocode.AdvancedRobot.RemoveCustomEvent(Robocode.Condition)"/>.
              <p/>
              <example>
                <code>
                // Create the condition for our custom event
                Condition triggerHitCondition = new Condition("triggerhit")
                {
                    public bool Test()
                    {
                        return (Energy &lt;= trigger);
                    }
                }
            
                // Add our custom event based on our condition
                AddCustomEvent(triggerHitCondition);
                </code>
              </example>
              <seealso cref="T:Robocode.Condition"/>
              <seealso cref="M:Robocode.AdvancedRobot.RemoveCustomEvent(Robocode.Condition)"/>
            </summary>
              <param name="condition">
                 The condition that must be met.
                 Throws ArgumentException if the condition parameter has been set to null.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.AddCustomEvent(System.String,System.Int32,Robocode.ConditionTest)">
            <summary>
            Same as <see cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>, but alows to define condition as anonymous method.
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.RemoveCustomEvent(Robocode.Condition)">
            <summary>
              Removes a custom event that was previously added by calling
              <see cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>.
              <p/>
              <example>
                <code>
                // Create the condition for our custom event
                Condition triggerHitCondition = new Condition("triggerhit")
                {
                    public bool Test()
                    {
                        return (Energy &lt;= trigger);
                    }
                }
            
                // Add our custom event based on our condition
                AddCustomEvent(triggerHitCondition);
                ...
                // do something with your robot
                ...
                // Remove the custom event based on our condition
                RemoveCustomEvent(triggerHitCondition);
                </code>
              </example>
              <seealso cref="T:Robocode.Condition"/>
              <seealso cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>
            </summary>
              <param name="condition">
                The condition that was previous added and that must be removed now.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.ClearAllEvents">
            <summary>
              Clears Out any pending events in the robot's event queue immediately.
            
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.Execute">
             <summary>
               Executes any pending actions, or continues executing actions that are
               in process. This call returns after the actions have been started.
               <p/>
               Note that advanced robots <em>must</em> call this function in order to
               Execute pending set* calls like e.g. <see cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>,
               <see cref="M:Robocode.AdvancedRobot.SetFire(System.Double)"/>, <see cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/> etc.
               Otherwise, these calls will never get executed.
               <p/>
               In this example the robot will move while turning:
               <example>
                 <code>
                 SetTurnRight(90);
                 SetAhead(100);
                 Execute();
            
                 while (DistanceRemaining &gt; 0 &amp;&amp; TurnRemaining &gt; 0)
                 {
                     Execute();
                 }
                 </code>
               </example>
             </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetAllEvents">
            <summary>
              Returns a list containing all events currently in the robot's queue.
              You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (Event evnt : GetAllEvents()) {
                    if (evnt is HitRobotEvent) {
                        // do something with the event
                    } else if (evnt is HitByBulletEvent) {
                        // do something with the event
                    }
                }
                </code>
              </example>
              <seealso cref="T:Robocode.Event"/>
              <seealso cref="M:Robocode.AdvancedRobot.ClearAllEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetStatusEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetScannedRobotEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetBulletHitEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetBulletMissedEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetBulletHitBulletEvents"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetRobotDeathEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetBulletHitBulletEvents">
            <summary>
              Returns a list containing all BulletHitBulletEvents currently in the
              robot's queue. You might, for example, call this while processing another
              event.
              <p/>
              <example>
                <code>
                for (BulletHitBulletEvent evnt : GetBulletHitBulletEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              <seealso cref="T:Robocode.BulletHitBulletEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetBulletHitEvents">
            <summary>
              Returns a list containing all BulletHitEvents currently in the robot's
              queue. You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (BulletHitEvent event: GetBulletHitEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              <seealso cref="T:Robocode.BulletHitEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetBulletMissedEvents">
            <summary>
              Returns a list containing all BulletMissedEvents currently in the
              robot's queue. You might, for example, call this while processing another
              event.
              <p/>
              <example>
                <code>
                for (BulletMissedEvent evnt : GetBulletMissedEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
              <seealso cref="T:Robocode.BulletMissedEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetDataDirectory">
            <summary>
              Returns a file representing a data directory for the robot.
              <p/>
              The system will automatically create the directory for you, so you do not
              need to create it by yourself.
              <seealso cref="M:Robocode.AdvancedRobot.GetDataFile(System.String)"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetDataFile(System.String)">
            <summary>
              Returns a file in your data directory that you can write to.
              <p/>
              The system will automatically create the directory for you, so you do not
              need to create it by yourself.
              <p/>
              Please notice that the max. size of your data file is set to 200000 bytes
              (~195 KB).
              <p/>
              See the Sample.SittingDuck to see an example of how to use this
              method.
              <seealso cref="M:Robocode.AdvancedRobot.GetDataDirectory"/>
            </summary>
              <param name="filename">
                The file name of the data file for your robot
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetEventPriority(System.String)">
            <summary>        
              Returns the current priority of a class of events.
              An event priority is a value from 0 - 99. The higher value, the higher priority.
              <p/>
              <example>
                <code>
                int myHitRobotPriority = GetEventPriority("HitRobotEvent");
                </code>
              </example>
              <p/>
              The default priorities are, from highest to lowest:
              <pre>    <see cref="T:Robocode.BattleEndedEvent"/>:     100 (reserved)
                <see cref="T:Robocode.WinEvent"/>:             100 (reserved)
                <see cref="T:Robocode.SkippedTurnEvent"/>:     100 (reserved)
                <see cref="T:Robocode.StatusEvent"/>:           99
                Key and mouse events:  98
                <see cref="T:Robocode.CustomEvent"/>:           80 (default value)
                <see cref="T:Robocode.MessageEvent"/>:          75
                <see cref="T:Robocode.RobotDeathEvent"/>:       70
                <see cref="T:Robocode.BulletMissedEvent"/>:     60
                <see cref="T:Robocode.BulletHitBulletEvent"/>:  55
                <see cref="T:Robocode.BulletHitEvent"/>:        50
                <see cref="T:Robocode.HitByBulletEvent"/>:      40
                <see cref="T:Robocode.HitWallEvent"/>:          30
                <see cref="T:Robocode.HitRobotEvent"/>:         20
                <see cref="T:Robocode.ScannedRobotEvent"/>:     10
                <see cref="T:Robocode.PaintEvent"/>:             5
                <see cref="T:Robocode.DeathEvent"/>:            -1 (reserved)
              </pre>
              <seealso cref="M:Robocode.AdvancedRobot.SetEventPriority(System.String,System.Int32)"/>
            </summary>
              <param name="eventClass">
                the name of the event class (string)
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetHitByBulletEvents">
            <summary>        
              Returns a list containing all HitByBulletEvents currently in the
              robot's queue. You might, for example, call this while processing
              another event.
              <p/>
              <example>
                <code>
                for (HitByBulletEvent evnt : GetHitByBulletEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnHitByBullet(Robocode.HitByBulletEvent)"/>
              <seealso cref="T:Robocode.HitByBulletEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetHitRobotEvents">
            <summary>        
              Returns a list containing all HitRobotEvents currently in the robot's
              queue. You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (HitRobotEvent evnt : GetHitRobotEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnHitRobot(Robocode.HitRobotEvent)"/>
              <seealso cref="T:Robocode.HitRobotEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetHitWallEvents">
            <summary>        
              Returns a list containing all HitWallEvents currently in the robot's
              queue. You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (HitWallEvent evnt : GetHitWallEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnHitWall(Robocode.HitWallEvent)"/>
              <seealso cref="T:Robocode.HitWallEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetRobotDeathEvents">
            <summary>        
              Returns a list containing all RobotDeathEvents currently in the robot's
              queue. You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (RobotDeathEvent evnt : GetRobotDeathEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnRobotDeath(Robocode.RobotDeathEvent)"/>
              <seealso cref="T:Robocode.RobotDeathEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetScannedRobotEvents">
            <summary>        
              Returns a list containing all ScannedRobotEvents currently in the robot's queue.
              You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (ScannedRobotEvent evnt : GetScannedRobotEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
              <seealso cref="T:Robocode.ScannedRobotEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.GetStatusEvents">
            <summary>        
              Returns a list containing all StatusEvents currently in the robot's
              queue. You might, for example, call this while processing another event.
              <p/>
              <example>
                <code>
                for (StatusEvent evnt : GetStatusEvents())
                {
                    // do something with the event
                }
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.OnStatus(Robocode.StatusEvent)"/>
              <seealso cref="T:Robocode.StatusEvent"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetAllEvents"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.OnCustomEvent(Robocode.CustomEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.AdvancedRobot.SetEventPriority(System.String,System.Int32)">
            <summary>        
              Sets the priority of a class of events.
              <p/>
              Events are sent to the onXXX handlers in order of priority.
              Higher priority events can interrupt lower priority events.
              For events with the same priority, newer events are always sent first.
              Valid priorities are 0 - 99, where 100 is reserved and 80 is the default
              priority.
              <p/>
              <example>
                <code>
                SetEventPriority("RobotDeathEvent", 15);
                </code>
              </example>
              <p/>
              The default priorities are, from highest to lowest:
              <pre>    <see cref="T:Robocode.WinEvent"/>:             100 (reserved)
                <see cref="T:Robocode.SkippedTurnEvent"/>:     100 (reserved)
                <see cref="T:Robocode.StatusEvent"/>:           99
                <see cref="T:Robocode.CustomEvent"/>:           80
                <see cref="T:Robocode.MessageEvent"/>:          75
                <see cref="T:Robocode.RobotDeathEvent"/>:       70
                <see cref="T:Robocode.BulletMissedEvent"/>:     60
                <see cref="T:Robocode.BulletHitBulletEvent"/>:  55
                <see cref="T:Robocode.BulletHitEvent"/>:        50
                <see cref="T:Robocode.HitByBulletEvent"/>:      40
                <see cref="T:Robocode.HitWallEvent"/>:          30
                <see cref="T:Robocode.HitRobotEvent"/>:         20
                <see cref="T:Robocode.ScannedRobotEvent"/>:     10
                <see cref="T:Robocode.PaintEvent"/>:             5
                <see cref="T:Robocode.DeathEvent"/>:            -1 (reserved)
              </pre>
              <p/>
              Note that you cannot change the priority for events with the special
              priority value -1 or 100 (reserved) as these events are system events.
              Also note that you cannot change the priority of CustomEvent.
              Instead you must change the priority of the condition(s) for your custom
              event(s).
              <seealso cref="M:Robocode.AdvancedRobot.GetEventPriority(System.String)"/>
            </summary>
              <param name="eventClass">
                The name of the event class (string) to set the priority for
              </param>
              <param name="priority">
                The new priority for that event class
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetResume">
            <summary>        
              Sets the robot to resume the movement stopped by <see cref="M:Robocode.Robot.Stop"/>
              or <see cref="M:Robocode.AdvancedRobot.SetStop"/>, if any.
              <p/>
              This call returns immediately, and will not execute until you call
              <see cref="M:Robocode.AdvancedRobot.Execute"/> or take an action that executes.
            
              <seealso cref="M:Robocode.Robot.Resume"/>
              <seealso cref="M:Robocode.Robot.Stop"/>
              <seealso cref="M:Robocode.Robot.Stop(System.Boolean)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetStop"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetStop(System.Boolean)"/>
              <seealso cref="M:Robocode.AdvancedRobot.Execute"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetStop">
            <summary>        
              This call is identical to <see cref="M:Robocode.Robot.Stop"/>, but returns immediately, and
              will not execute until you call <see cref="M:Robocode.AdvancedRobot.Execute"/> or take an action that
              executes.
              <p/>
              If there is already movement saved from a previous stop, this will have
              no effect.
              <p/>
              This call is equivalent to calling SetStop(false);
            
              <seealso cref="M:Robocode.Robot.Stop"/>
              <seealso cref="M:Robocode.Robot.Stop(System.Boolean)"/>
              <seealso cref="M:Robocode.Robot.Resume"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetResume"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetStop(System.Boolean)"/>
              <seealso cref="M:Robocode.AdvancedRobot.Execute"/>
            </summary>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetStop(System.Boolean)">
            <summary>        
              This call is identical to <see cref="M:Robocode.Robot.Stop(System.Boolean)"/>, but
              returns immediately, and will not execute until you call
              <see cref="M:Robocode.AdvancedRobot.Execute"/> or take an action that executes.
              <p/>
              If there is already movement saved from a previous stop, you can
              overwrite it by calling SetStop(true).
            
              <seealso cref="M:Robocode.Robot.Stop"/>
              <seealso cref="M:Robocode.Robot.Stop(System.Boolean)"/>
              <seealso cref="M:Robocode.Robot.Resume"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetResume"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetStop"/>
              <seealso cref="M:Robocode.AdvancedRobot.Execute"/>
            </summary>
              <param name="overwrite">
                true if the movement saved from a previous stop
                should be overwritten; false otherwise.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnGunLeft(System.Double)">
            <summary>        
              Sets the robot's gun to turn left by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the gun to turn 180 degrees to the left
                SetTurnGunLeft(180);
            
                // Set the gun to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnGunLeft(-90);
            
                ...
                // Executes the last SetTurnGunLeft()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="degrees">
                The amount of degrees to turn the robot's gun to the left.
                If degrees &gt; 0 the robot's gun is set to turn left.
                If degrees &lt; 0 the robot's gun is set to turn right.
                If degrees = 0 the robot's gun is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnGunRight(System.Double)">
            <summary>        
              Sets the robot's gun to turn right by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the gun to turn 180 degrees to the right
                SetTurnGunRight(180);
            
                // Set the gun to turn 90 degrees to the left instead of right
                // (overrides the previous order)
                SetTurnGunRight(-90);
            
                ...
                // Executes the last SetTurnGunRight()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeftRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              
              <param name="degrees">
                The amount of degrees to turn the robot's gun to the right.
                If degrees &gt; 0 the robot's gun is set to turn right.
                If degrees &lt; 0 the robot's gun is set to turn left.
                If degrees = 0 the robot's gun is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRadarLeft(System.Double)">
            <summary>        
              Sets the robot's radar to turn left by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the radar to turn 180 degrees to the left
                SetTurnRadarLeft(180);
            
                // Set the radar to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnRadarLeft(-90);
            
                ...
                // Executes the last SetTurnRadarLeft()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="degrees">
                The amount of degrees to turn the robot's radar to the left.
                If degrees &gt; 0 the robot's radar is set to turn left.
                If degrees &lt; 0 the robot's radar is set to turn right.
                If degrees = 0 the robot's radar is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRadarRight(System.Double)">
            <summary>        
              Sets the robot's radar to turn right by degrees when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the radar to turn 180 degrees to the right
                SetTurnRadarRight(180);
            
                // Set the radar to turn 90 degrees to the right instead of right
                // (overrides the previous order)
                SetTurnRadarRight(-90);
            
                ...
                // Executes the last SetTurnRadarRight()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="degrees">
                The amount of degrees to turn the robot's radar to the rright.
                If degrees &gt; 0 the robot's radar is set to turn right.
                If degrees &lt; 0 the robot's radar is set to turn left.
                If degrees = 0 the robot's radar is set to stop turning.
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.WaitFor(Robocode.Condition)">
            <summary>        
              Does not return until a condition is met, i.e. when a
              <see cref="M:Robocode.Condition.Test"/> returns true.
              <p/>
              This call executes immediately.
              <p/>
              See the Sample.Crazy robot for how this method can be used.
              <seealso cref="T:Robocode.Condition"/>
              <seealso cref="M:Robocode.Condition.Test"/>
            </summary>
              <param name="condition">
                the condition that must be met before this call returns
              </param>
        </member>
        <member name="M:Robocode.AdvancedRobot.OnDeath(Robocode.DeathEvent)">
            <summary>        
              This method is called if your robot dies.
              <p/>
              You should override it in your robot if you want to be informed of this
              event. Actions will have no effect if called from this section. The
              intent is to allow you to perform calculations or print something out
              when the robot is killed.
              <seealso cref="T:Robocode.DeathEvent"/>
              <seealso cref="T:Robocode.Event"/>
            </summary>
              <param name="evnt">the death event set by the game</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.OnSkippedTurn(Robocode.SkippedTurnEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnLeftRadians(System.Double)">
            <summary>        
              Sets the robot's body to turn left by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the robot to turn 180 degrees to the left
                SetTurnLeftRadians(Math.PI);
            
                // Set the robot to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnLeftRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnLeftRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRightRadians(System.Double)"/>
            </summary>
              <param name="radians"> the amount of radians to turn the robot's body to the left.
              If radians &gt; 0 the robot is set to turn left.
              If radians &lt; 0 the robot is set to turn right.
              If radians = 0 the robot is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRightRadians(System.Double)">
            <summary>        
              Sets the robot's body to turn right by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the robot to turn 180 degrees to the right
                SetTurnRightRadians(Math.PI);
            
                // Set the robot to turn 90 degrees to the left instead of right
                // (overrides the previous order)
                SetTurnRightRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnRightRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeftRadians(System.Double)"/>
            </summary>
              <param name="radians"> the amount of radians to turn the robot's body to the right.
              If radians &gt; 0 the robot is set to turn right.
              If radians &lt; 0 the robot is set to turn left.
              If radians = 0 the robot is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)">
            <summary>        
              Immediately turns the robot's body to the left by radians.
              <p/>
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the robot's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Turn the robot 180 degrees to the left
                TurnLeftRadians(Math.PI);
            
                // Afterwards, turn the robot 90 degrees to the right
                TurnLeftRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's body to the left.
              If radians &gt; 0 the robot will turn right.
              If radians &lt; 0 the robot will turn left.
              If radians = 0 the robot will not turn, but execute.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)">
            <summary>        
              Immediately turns the robot's body to the right by radians.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the robot's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's body is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot 180 degrees to the right
                TurnRightRadians(Math.PI);
            
                // Afterwards, turn the robot 90 degrees to the left
                TurnRightRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians"> the amount of radians to turn the robot's body to the right.
              If radians &gt; 0 the robot will turn right.
              If radians &lt; 0 the robot will turn left.
              If radians = 0 the robot will not turn, but execute.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnGunLeftRadians(System.Double)">
            <summary>        
              Sets the robot's gun to turn left by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the gun to turn 180 degrees to the left
                SetTurnGunLeftRadians(Math.PI);
            
                // Set the gun to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnGunLeftRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnGunLeftRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians"> the amount of radians to turn the robot's gun to the left.
              If radians &gt; 0 the robot's gun is set to turn left.
              If radians &lt; 0 the robot's gun is set to turn right.
              If radians = 0 the robot's gun is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnGunRightRadians(System.Double)">
            <summary>        
              Sets the robot's gun to turn right by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the gun to turn 180 degrees to the right
                SetTurnGunRightRadians(Math.PI);
            
                // Set the gun to turn 90 degrees to the left instead of right
                // (overrides the previous order)
                SetTurnGunRightRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnGunRightRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeftRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's gun to the right.
              If radians &gt; 0 the robot's gun is set to turn left.
              If radians &lt; 0 the robot's gun is set to turn right.
              If radians = 0 the robot's gun is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)">
            <summary>        
              Sets the robot's radar to turn left by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Set the radar to turn 180 degrees to the left
                SetTurnRadarLeftRadians(Math.PI);
            
                // Set the radar to turn 90 degrees to the right instead of left
                // (overrides the previous order)
                SetTurnRadarLeftRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnRadarLeftRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's radar to the left.
              If radians &gt; 0 the robot's radar is set to turn left.
              If radians &lt; 0 the robot's radar is set to turn right.
              If radians = 0 the robot's radar is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)">
            <summary>
              Sets the robot's radar to turn right by radians when the next execution
              takes place.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Set the radar to turn 180 degrees to the right
                SetTurnRadarRightRadians(Math.PI);
            
                // Set the radar to turn 90 degrees to the right instead of right
                // (overrides the previous order)
                SetTurnRadarRightRadians(-Math.PI / 2);
            
                ...
                // Executes the last SetTurnRadarRightRadians()
                Execute();
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="radians"> the amount of radians to turn the robot's radar to the right.
              If radians &gt; 0 the robot's radar is set to turn left.
              If radians &lt; 0 the robot's radar is set to turn right.
              If radians = 0 the robot's radar is set to stop turning.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)">
            <summary>
              Immediately turns the robot's gun to the left by radians.
              <p/>
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the gun's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Turn the robot's gun 180 degrees to the left
                TurnGunLeftRadians(Math.PI);
            
                // Afterwards, turn the robot's gun 90 degrees to the right
                TurnGunLeftRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's gun to the left.
              If radians &gt; 0 the robot's gun will turn left.
              If radians &lt; 0 the robot's gun will turn right.
              If radians = 0 the robot's gun will not turn, but execute.</param>        
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)">
            <summary>
              Immediately turns the robot's gun to the right by radians.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the gun's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's gun is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot's gun 180 degrees to the right
                TurnGunRightRadians(Math.PI);
            
                // Afterwards, turn the robot's gun 90 degrees to the left
                TurnGunRightRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's gun to the right.
              If radians &gt; 0 the robot's gun will turn right.
              If radians &lt; 0 the robot's gun will turn left.
              If radians = 0 the robot's gun will not turn, but execute.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnRadarLeftRadians(System.Double)">
            <summary>
              Immediately turns the robot's radar to the left by radians.
              <p/>
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the radar's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn right
              instead of left.
              <p/>
              <example>
                <code>
                // Turn the robot's radar 180 degrees to the left
                TurnRadarLeftRadians(Math.PI);
            
                // Afterwards, turn the robot's radar 90 degrees to the right
                TurnRadarLeftRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's radar to the left.
              If radians &gt; 0 the robot's radar will turn left.
              If radians &lt; 0 the robot's radar will turn right.
              If radians = 0 the robot's radar will not turn, but execute.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.TurnRadarRightRadians(System.Double)">
            <summary>
              Immediately turns the robot's radar to the right by radians.
              This call executes immediately, and does not return until it is complete,
              i.e. when the angle remaining in the radar's turn is 0.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot's radar is set to turn left
              instead of right.
              <p/>
              <example>
                <code>
                // Turn the robot's radar 180 degrees to the right
                TurnRadarRightRadians(Math.PI);
            
                // Afterwards, turn the robot's radar 90 degrees to the left
                TurnRadarRightRadians(-Math.PI / 2);
                </code>
              </example>
              <seealso cref="M:Robocode.Robot.TurnRadarRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRadarLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnRightRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunLeftRadians(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnGunRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.TurnGunRightRadians(System.Double)"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForRobotTurn"/>
              <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
            </summary>
              <param name="radians">the amount of radians to turn the robot's radar to the right.
              If radians &gt; 0 the robot's radar will turn right.
              If radians &lt; 0 the robot's radar will turn left.
              If radians = 0 the robot's radar will not turn, but execute.</param>
        </member>
        <member name="M:Robocode.AdvancedRobot.Robocode#RobotInterfaces#IAdvancedRobot#GetAdvancedEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IAdvancedRobot.GetAdvancedEventListener"/>
        </member>
        <member name="P:Robocode.AdvancedRobot.DistanceRemaining">
            <summary>
              Returns the distance remaining in the robot's current move measured in
              pixels.
              <p/>
              This call returns both positive and negative values. Positive values
              means that the robot is currently moving forwards. Negative values means
              that the robot is currently moving backwards. If the returned value is 0,
              the robot currently stands still.
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.TurnRemaining">
            <summary>
              Returns the angle remaining in the robots's turn, in degrees.
              <p/>
              This call returns both positive and negative values.
              Positive values means that the robot is currently turning to the right.
              Negative values means that the robot is currently turning to the left.
              If the returned value is 0, the robot is currently not turning.
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.DistanceRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.GunTurnRemaining">
            <summary>
              Returns the angle remaining in the gun's turn, in degrees.
              <p/>
              This call returns both positive and negative values.
              Positive values means that the gun is currently turning to the right.
              Negative values means that the gun is currently turning to the left.
              If the returned value is 0, the gun is currently not turning.
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.DistanceRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.RadarTurnRemaining">
            <summary>
              Returns the angle remaining in the radar's turn, in degrees.
              <p/>
              This call returns both positive and negative values.
              Positive values means that the radar is currently turning to the right.
              Negative values means that the radar is currently turning to the left.
              If the returned value is 0, the radar is currently not turning.
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.DistanceRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.DataQuotaAvailable">
            <summary>
              Returns the data quota available in your data directory, i.e. the amount
              of bytes left in the data directory for the robot.
              <seealso cref="M:Robocode.AdvancedRobot.GetDataDirectory"/>
              <seealso cref="M:Robocode.AdvancedRobot.GetDataFile(System.String)"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.IsInterruptible">
            <summary>        
              Call this during an event handler to allow new events of the same
              priority to restart the event handler.
              <p/>
              <example>
                <code>
                public override void OnScannedRobot(ScannedRobotEvent e)
                {
                    Fire(1);
                    IsInterruptible = true;
                    Ahead(100); // If you see a robot while moving ahead,
                                // this handler will start from the top
                                // Without IsInterruptible (true), we wouldn't
                                // receive scan events at all!
                                // We'll only get here if we don't see a robot during the move.
                    Out.WriteLine("Ok, I can't see anyone");
                }
                </code>
              </example>
              <seealso cref="M:Robocode.AdvancedRobot.SetEventPriority(System.String,System.Int32)"/>
              <seealso cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.MaxTurnRate">
            <summary>        
              Sets the maximum turn rate of the robot measured in degrees if the robot
              should turn slower than <see cref="F:Robocode.Rules.MAX_TURN_RATE"/> (10 degress/turn).
              <seealso cref="M:Robocode.Robot.TurnRight(System.Double)"/>
              <seealso cref="M:Robocode.Robot.TurnLeft(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>
              <seealso cref="P:Robocode.AdvancedRobot.MaxVelocity"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.MaxVelocity">
            <summary>        
              Sets the maximum velocity of the robot measured in pixels/turn if the
              robot should move slower than <see cref="F:Robocode.Rules.MAX_VELOCITY"/> (8 pixels/turn).
              <seealso cref="M:Robocode.Robot.Ahead(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>
              <seealso cref="M:Robocode.Robot.Back(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetBack(System.Double)"/>
              <seealso cref="P:Robocode.AdvancedRobot.MaxTurnRate"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.HeadingRadians">
            <summary>        
              Returns the direction that the robot's body is facing, in radians.
              The value returned will be between 0 and 2 * PI (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              PI / 2 means East, PI means South, and 3 * PI / 2 means West.
              <seealso cref="P:Robocode.Robot.Heading"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunHeadingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarHeadingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.GunHeadingRadians">
            <summary>        
              Returns the direction that the robot's gun is facing, in radians.
              The value returned will be between 0 and 2 * PI (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              PI / 2 means East, PI means South, and 3 * PI / 2 means West.
              <seealso cref="P:Robocode.Robot.GunHeading"/>
              <seealso cref="P:Robocode.AdvancedRobot.HeadingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarHeadingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.RadarHeadingRadians">
            <summary>        
              Returns the direction that the robot's radar is facing, in radians.
              The value returned will be between 0 and 2 * PI (is excluded).
              <p/>
              Note that the heading in Robocode is like a compass, where 0 means North,
              PI / 2 means East, PI means South, and 3 * PI / 2 means West.
              <seealso cref="P:Robocode.Robot.RadarHeading"/>
              <seealso cref="P:Robocode.AdvancedRobot.HeadingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunHeadingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.GunTurnRemainingRadians">
            <summary>        
              Returns the angle remaining in the gun's turn, in radians.
              <p/>
              This call returns both positive and negative values. Positive values
              means that the gun is currently turning to the right. Negative values
              means that the gun is currently turning to the left.
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians">
            <summary>        
              Returns the angle remaining in the radar's turn, in radians.
              <p/>
              This call returns both positive and negative values. Positive values
              means that the radar is currently turning to the right. Negative values
              means that the radar is currently turning to the left.
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="P:Robocode.AdvancedRobot.TurnRemainingRadians">
            <summary>        
              Returns the angle remaining in the robot's turn, in radians.
              <p/>
              This call returns both positive and negative values. Positive values
              means that the robot is currently turning to the right. Negative values
              means that the robot is currently turning to the left.
              <seealso cref="P:Robocode.AdvancedRobot.TurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.GunTurnRemainingRadians"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemaining"/>
              <seealso cref="P:Robocode.AdvancedRobot.RadarTurnRemainingRadians"/>
            </summary>
        </member>
        <member name="T:Robocode.BattleEndedEvent">
            <summary>
              A BattleEndedEvent is sent to <see cref="M:Robocode.Robot.OnBattleEnded(Robocode.BattleEndedEvent)"/>
              when the battle is ended.
              You can use the information contained in this event to determine if the
              battle was aborted and also get the results of the battle.
              <seealso cref="T:Robocode.BattleResults"/>
              <seealso cref="M:Robocode.Robot.OnBattleEnded(Robocode.BattleEndedEvent)"/>
            </summary>
        </member>
        <member name="T:Robocode.Event">
            <summary>
            The superclass of all Robocode events.
            </summary>
        </member>
        <member name="M:Robocode.Event.CompareTo(Robocode.Event)">
             <summary>
             Compares this event to another event regarding precedence.
             <para>
             The event precedence is first and foremost determined by the event time,
             secondly the event priority, and lastly specific event information.</para>
             <para>
             This method will first compare the time of each event. If the event time
             is the same for both events, then this method compared the priority of
             each event. If the event priorities are equals, then this method will
             compare the two events based on specific event information.</para>
             <para>
             This method is called by the game in order to sort the event queue of a
             robot to make sure the events are listed in chronological order.</para>
             </summary>
            
             <param name="evnt">the event to compare to this event.</param>
             <returns>
             Returns a negative value if this event has higher precedence, i.e. must
             be listed before the specified event. A positive value if this event
             has a lower precedence, i.e. must be listed after the specified event.
             0 means that the precedence of the two events are equal.
             </returns>
        </member>
        <member name="M:Robocode.Event.SetTimeHidden(System.Int64)">
            <summary>
            Hidden method for setting the exact time when this event occurred.
            </summary>
            <remarks>
            This method is called by the game engine only.
            </remarks>
            <param name="time">the time when this event occurred.</param>
        </member>
        <member name="M:Robocode.Event.SetPriorityHidden(System.Int32)">
            <summary>
            Hidden method for setting the priority from the game engine without checking for the 'addedToQueue' flag.
            </summary>
            <remarks>
            This method is called by the game engine only.
            </remarks>
            <param name="newPriority">the new priority of this event.</param>
        </member>
        <member name="M:Robocode.Event.Dispatch(Robocode.RobotInterfaces.IBasicRobot,net.sf.robocode.peer.IRobotStaticsN,Robocode.IGraphics)">
            <summary>
            Dispatch this event for a robot, it's statistics, and graphics context.
            </summary>
            <param name="robot">the robot to dispatch to.</param>
            <param name="statics">the robot to statistics to.</param>
            <param name="graphics">the robot to graphics to.</param>
        </member>
        <member name="M:Robocode.Event.createHiddenHelper">
            <summary>
            Returns a hidden event helper for accessing hidden methods on this object.
            </summary>
        </member>
        <member name="P:Robocode.Event.Time">
            <summary>
            The time when this event occurred.
            </summary>
            <remarks>
            Note that the time is equal to the turn of a battle round.
            <para>
            This method is intended for letting robot developers create their own event types.
            It is not possible to change the time of an event after it has been added to the event
            queue of the robot.</para>
            </remarks>
        </member>
        <member name="P:Robocode.Event.Priority">
            <summary>
            The priority of this event.
            <para>
            An event priority is a value from 0 - 99. The higher value, the higher priority.</para>
            <para>
            The default priority is 80, but varies depending on the type of event.</para>
            </summary>
            <remarks>
            This method is intended for letting robot developers create their own event types.
            <para>
            It is not possible to change the priority of an event after it has been added to the event
            queue of the robot.</para>
            </remarks>
            <seealso cref="!:SetEventPriority(string, int)"/>
        </member>
        <member name="P:Robocode.Event.DefaultPriority">
            <summary>
            The default priority of this event class.
            </summary>
        </member>
        <member name="P:Robocode.Event.IsCriticalEvent">
            <summary>
            Checks if this event must be delivered even after timeout.
            </summary>
            <returns>
            <c>true</c> when this event must be delivered even after timeout;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Robocode.Event.HiddenEventHelper">
            <summary>
            Hidden event helper implementation for accessing the internal methods of an event.
            </summary>
            <remarks>
            This class is used internally by the game engine.
            </remarks>
        </member>
        <member name="M:Robocode.BattleEndedEvent.#ctor(System.Boolean,Robocode.BattleResults)">
             
            <summary>
              Called by the game to create a new BattleEndedEvent.
            </summary>
        </member>
        <member name="P:Robocode.BattleEndedEvent.IsAborted">
            <summary>
              Checks if this battle was aborted.
              Returns true if the battle was aborted
            </summary>
        </member>
        <member name="P:Robocode.BattleEndedEvent.Results">
            <summary>
              Returns the battle results.
            </summary>
        </member>
        <member name="P:Robocode.BattleEndedEvent.Priority">
            <inheritdoc />
        </member>
        <member name="T:Robocode.BattleResults">
            <summary>
              Contains the battle results returned by <see cref="P:Robocode.BattleEndedEvent.Results"/>
              when a battle has ended.
              <seealso cref="P:Robocode.BattleEndedEvent.Results"/>
              <seealso cref="M:Robocode.Robot.OnBattleEnded(Robocode.BattleEndedEvent)"/>
            </summary>
        </member>
        <member name="M:Robocode.BattleResults.#ctor(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
              Constructs this BattleResults object.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.TeamLeaderName">
            <summary>
              Returns the name of the team leader in the team or the name of the
              robot if the robot is not participating in a team.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Rank">
            <summary>
              Returns the rank of this robot in the battle results.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Score">
            <summary>
              Returns the total score of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Survival">
            <summary>
              Returns the survival score of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.LastSurvivorBonus">
            <summary>
              Returns the last survivor score of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.BulletDamage">
            <summary>
              Returns the bullet damage score of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.BulletDamageBonus">
            <summary>
              Returns the bullet damage bonus of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.RamDamage">
            <summary>
              Returns the ram damage score of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.RamDamageBonus">
            <summary>
              Returns the ram damage bonus of this robot in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Firsts">
            <summary>
              Returns the number of rounds this robot placed first in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Seconds">
            <summary>
              Returns the number of rounds this robot placed second in the battle.
            </summary>
        </member>
        <member name="P:Robocode.BattleResults.Thirds">
            <summary>
              Returns the number of rounds this robot placed third in the battle.
            </summary>
        </member>
        <member name="T:Robocode.BattleRules">
            <summary>
             Contains the battle rules returned by <see cref="!:Robocode.Control.Events.BattleStartedEvent.BattleRules">BattleStartedEvent.BattleRules</see>
             when a battle is started and <see cref="!:Robocode.Control.Events.BattleCompletedEvent.BattleRules">BattleCompletedEvent.BattleRules</see>
             when a battle is completed.
            </summary>
            <seealso cref="!:Robocode.Control.Events.BattleStartedEvent">BattleStartedEvent</seealso>
            <seealso cref="!:Robocode.Control.Events.BattleCompletedEvent">BattleCompletedEvent</seealso>
        </member>
        <member name="P:Robocode.BattleRules.BattlefieldWidth">
            <summary>
              Returns the battlefield width.
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.BattlefieldHeight">
            <summary>
              Returns the battlefield height.
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.NumRounds">
            <summary>
              Returns the number of rounds.
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.GunCoolingRate">
            <summary>
              Returns the rate at which the gun will cool down, i.e. the amount of heat the gun heat will drop per turn.
              <p/>
              The gun cooling rate is default 0.1 per turn, but can be changed by the battle setup.
              So don't count on the cooling rate being 0.1!
              <seealso cref="P:Robocode.Robot.GunHeat"/>
              <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.InactivityTime">
            <summary>
              Returns the allowed inactivity time, where the robot is not taking any action, before will begin to be zapped.
              The inactivity time is measured in turns, and is the allowed time that a robot is allowed to omit taking
              action before being punished by the game by zapping.
              <p/>
              When a robot is zapped by the game, it will loose 0.1 energy points per turn. Eventually the robot will be
              killed by zapping until the robot takes action. When the robot takes action, the inactivity time counter is
              reset.
              <p/>
              The allowed inactivity time is per default 450 turns, but can be changed by the battle setup.
              So don't count on the inactivity time being 450 turns!
              <seealso cref="M:Robocode.Robot.DoNothing"/>
              <seealso cref="M:Robocode.AdvancedRobot.Execute"/>
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.HideEnemyNames">
            <summary>
              Returns true if the enemy names are hidden, i.e. anonymous; false otherwise.
            </summary>
        </member>
        <member name="P:Robocode.BattleRules.SentryBorderSize">
            <summary>
              Returns the sentry border size for a <see cref="!:Robocode.BorderSentry">BorderSentry</see> that defines the how
              far a BorderSentry is allowed to move from the border edges measured in units.<br/>
              Hence, the sentry border size defines the width/range of the border area surrounding the battlefield that
              BorderSentrys cannot leave (sentry robots robots must stay in the border area), but it also define the
              distance from the border edges where BorderSentrys are allowed/able to make damage to robots entering this
              border area.
            </summary>
        </member>
        <member name="T:Robocode.Bullet">
             
            <summary>
              Represents a bullet. This is returned from <see cref="M:Robocode.Robot.FireBullet(System.Double)"/>
              and <see cref="M:Robocode.AdvancedRobot.SetFireBullet(System.Double)"/>, and all the bullet-related
              events.
              <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetFireBullet(System.Double)"/>
              <seealso cref="T:Robocode.BulletHitEvent"/>
              <seealso cref="T:Robocode.BulletMissedEvent"/>
              <seealso cref="T:Robocode.BulletHitBulletEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.Bullet.#ctor(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
              Called by the game to create a new Bullet object
            </summary>
        </member>
        <member name="M:Robocode.Bullet.update(System.Double,System.Double,System.String,System.Boolean)">
            <summary>
              Updates this bullet based on the specified bullet status.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Heading">
            <summary>
              Returns the direction the bullet is/was heading, in degrees
              (0 &lt;= getHeading() &lt; 360). This is not relative to the direction you are facing.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.HeadingRadians">
            <summary>
              Returns the direction the bullet is/was heading, in radians
              (0 &lt;= getHeadingRadians() &lt; 2 * Math.PI). This is not relative to the direction you are facing.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Name">
            <summary>
              Returns the name of the robot that fired this bullet.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Power">
            <summary>
              Returns the power of this bullet.
              <p />
              The bullet will do (4 * power) damage if it hits another robot.
              If power is greater than 1, it will do an additional 2 * (power - 1)
              damage. You will get (3 * power) back if you hit the other robot.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Velocity">
            <summary>
              Returns the velocity of this bullet. The velocity of the bullet is
              constant once it has been fired.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Victim">
            <summary>
              Returns the name of the robot that this bullet hit, or null if
              the bullet has not hit a robot.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.X">
            <summary>
              Returns the X position of the bullet.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.Y">
            <summary>
              Returns the Y position of the bullet.
            </summary>
        </member>
        <member name="P:Robocode.Bullet.IsActive">
            <summary>
              Checks if this bullet is still active on the battlefield.
            </summary>
        </member>
        <member name="T:Robocode.BulletHitBulletEvent">
            <summary>
              This event is sent to <see cref="M:Robocode.Robot.OnBulletHitBullet(Robocode.BulletHitBulletEvent)"/>
              when one of your bullets has hit another bullet.
            </summary>
        </member>
        <member name="M:Robocode.BulletHitBulletEvent.#ctor(Robocode.Bullet,Robocode.Bullet)">
            <summary>
              Called by the game to create a new BulletHitEvent.
            </summary>
        </member>
        <member name="P:Robocode.BulletHitBulletEvent.Bullet">
            <summary>
              Returns your bullet that hit another bullet.
            </summary>
        </member>
        <member name="P:Robocode.BulletHitBulletEvent.HitBullet">
            <summary>
              Returns the bullet that was hit by your bullet.
            </summary>
        </member>
        <member name="T:Robocode.BulletHitEvent">
            <summary>
              This event is sent to <see cref="M:Robocode.Robot.OnBulletHit(Robocode.BulletHitEvent)"/>
              when one of your bullets has hit another robot.
            </summary>
        </member>
        <member name="M:Robocode.BulletHitEvent.#ctor(System.String,System.Double,Robocode.Bullet)">
            <summary>
              Called by the game to create a new BulletHitEvent.
            </summary>
        </member>
        <member name="P:Robocode.BulletHitEvent.Bullet">
            <summary>
              Returns the bullet of yours that hit the robot.
            </summary>
        </member>
        <member name="P:Robocode.BulletHitEvent.VictimEnergy">
            <summary>
              Returns the remaining energy of the robot your bullet has hit (after the
              damage done by your bullet).
            </summary>
        </member>
        <member name="P:Robocode.BulletHitEvent.VictimName">
            <summary>
              Returns the name of the robot your bullet hit.
            </summary>
        </member>
        <member name="T:Robocode.BulletMissedEvent">
            <summary>
              This event is sent to <see cref="M:Robocode.Robot.OnBulletMissed(Robocode.BulletMissedEvent)"/>
              when one of your bullets has missed, i.e. when the bullet has
              reached the border of the battlefield.
            </summary>
        </member>
        <member name="M:Robocode.BulletMissedEvent.#ctor(Robocode.Bullet)">
             
            <summary>
              Called by the game to create a new BulletMissedEvent.
            </summary>
        </member>
        <member name="P:Robocode.BulletMissedEvent.Bullet">
             
            <summary>
              Returns the bullet that missed.
            </summary>
        </member>
        <member name="T:Robocode.Condition">
            <summary>
            Condition is used to define custom  <see cref="M:Robocode.AdvancedRobot.WaitFor(Robocode.Condition)"/> 
            and custom events for an AdvancedRobot. The code below is taken from the sample robot
            named samplecs.Target. See the samplecs/Target.cs for details.
            <example>
              <code>
              AddCustomEvent(
                  new Condition("triggerhit", (c) =&gt;
                  {
                      return Energy &lt;= trigger;
                  }));
              </code>
            </example>
            <see cref="M:Robocode.AdvancedRobot.WaitFor(Robocode.Condition)"/>
            <see cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>
            <see cref="M:Robocode.AdvancedRobot.RemoveCustomEvent(Robocode.Condition)"/>
            <see cref="M:Robocode.AdvancedRobot.OnCustomEvent(Robocode.CustomEvent)"/>
            </summary>
        </member>
        <member name="F:Robocode.Condition.priority">
            <summary>
            The priority of this condition. Defaults to 80.
            </summary>
        </member>
        <member name="F:Robocode.Condition.name">
            <summary>
            The name of this condition.
            </summary>
        </member>
        <member name="M:Robocode.Condition.#ctor(System.String,System.Int32,Robocode.ConditionTest)">
            <summary>
            Convinience constructor, allows to pass delegate to method, instead of overriding Test() method.
            </summary>
        </member>
        <member name="M:Robocode.Condition.#ctor(System.String,Robocode.ConditionTest)">
            <summary>
            Convinience constructor, allows to pass delegate to method, instead of overriding Test() method.
            </summary>
        </member>
        <member name="M:Robocode.Condition.#ctor(Robocode.ConditionTest)">
            <summary>
            Convinience constructor, allows to pass delegate to method, instead of overriding Test() method.
            </summary>
        </member>
        <member name="M:Robocode.Condition.#ctor">
            <summary>
            Creates a new, unnamed Condition with the default priority, which is 80.
            </summary>
        </member>
        <member name="M:Robocode.Condition.#ctor(System.String)">
            <summary>
            Creates a new Condition with the specified name, and default priority, which is 80.
            </summary>
            <param name="name">The name for the new Condition</param>
        </member>
        <member name="M:Robocode.Condition.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Condition with the specified name and priority.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            </summary>
            <param name="name">The name for the new condition</param>
            <param name="priority">The priority of the new condition</param>
        </member>
        <member name="M:Robocode.Condition.Test">
            <summary>
            Overriding the Test() method is the point of a Condition.
            The game will call your Test() function, and take action if it returns true.
            This is valid for both <see cref="M:Robocode.AdvancedRobot.WaitFor(Robocode.Condition)"/> and
            <see cref="M:Robocode.AdvancedRobot.AddCustomEvent(Robocode.Condition)"/>
            <p/>
            You may not take any actions inside of Test().
            </summary>
        </member>
        <member name="P:Robocode.Condition.Name">
            <summary>
            Returns the name of this condition.
            </summary>
        </member>
        <member name="P:Robocode.Condition.Priority">
            <summary>
            Returns the priority of this condition.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            </summary>
        </member>
        <member name="T:Robocode.ConditionTest">
            <summary>
            Method signature for Test method of <see cref="T:Robocode.Condition"/>
            </summary>
        </member>
        <member name="T:Robocode.CustomEvent">
            <summary>
            This event is sent to <see cref="M:Robocode.AdvancedRobot.OnCustomEvent(Robocode.CustomEvent)"/>
            when a custom condition is met. Be sure to reset or remove the custom condition to avoid
            having it recurring repeatedly (see the example for the <see cref="P:Robocode.CustomEvent.Condition"/> method.
            <seealso cref="P:Robocode.CustomEvent.Condition"/>
            </summary>
        </member>
        <member name="M:Robocode.CustomEvent.#ctor(Robocode.Condition)">
            <summary>
            Called by the game to create a new CustomEvent when a condition is met.
            </summary>
        </member>
        <member name="M:Robocode.CustomEvent.#ctor(Robocode.Condition,System.Int32)">
            <summary>
            Called by the game to create a new CustomEvent when a condition is met.
            The event will have the given priority.
            An event priority is a value from 0 - 99. The higher value, the higher
            priority. The default priority is 80.
            <p/>
            This is equivalent to calling <see cref="P:Robocode.Condition.Priority"/> on the
            Condition.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="priority">The priority of the condition</param>
        </member>
        <member name="P:Robocode.CustomEvent.Condition">
            <summary>
            Returns the condition that fired, causing this event to be generated.
            Use this to determine which condition fired, and to remove the custom event.
            <example>
              <code>
              public void OnCustomEvent(CustomEvent evnt)
              {
                  if (event.Condition.Name == "mycondition")
                  {
                      RemoveCustomEvent(event.Condition);
                      // do something else
                  }
              }
              </code>
            </example>
            </summary>
        </member>
        <member name="T:Robocode.DeathEvent">
            <summary>
            This event is sent to <see cref="M:Robocode.Robot.OnDeath(Robocode.DeathEvent)"/> when your robot dies.
            </summary>
        </member>
        <member name="P:Robocode.DeathEvent.Priority">
            <inheritdoc />
        </member>
        <member name="T:Robocode.GunTurnCompleteCondition">
            <summary>
            A prebuilt condition you can use that indicates your gun has finished turning.
            <seealso cref="T:Robocode.Condition"/>
            </summary>
        </member>
        <member name="M:Robocode.GunTurnCompleteCondition.#ctor(Robocode.AdvancedRobot)">
            <summary>
            Creates a new GunTurnCompleteCondition with default priority.
            The default priority is 80.
            </summary>
            <param name="robot">Your robot, which must be an <see cref="T:Robocode.AdvancedRobot"/></param>
        </member>
        <member name="M:Robocode.GunTurnCompleteCondition.#ctor(Robocode.AdvancedRobot,System.Int32)">
            <summary>
            Creates a new GunTurnCompleteCondition with a specific priority.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            <seealso cref="P:Robocode.Condition.Priority"/>
            </summary>
            <param name="robot">Your robot, which must be an <see cref="T:Robocode.AdvancedRobot"/></param>
            <param name="priority">The priority of this condition</param>
        </member>
        <member name="M:Robocode.GunTurnCompleteCondition.Test">
            <summary>
            Tests if the gun has stopped turning.
            Returns true if the gun has stopped turning
            </summary>
        </member>
        <member name="T:Robocode.HitByBulletEvent">
            <summary>
            A HitByBulletEvent is sent to <see cref="M:Robocode.Robot.OnHitByBullet(Robocode.HitByBulletEvent)"/>
            when your robot has been hit by a bullet.
            You can use the information contained in this event to determine what to do.
            </summary>
        </member>
        <member name="M:Robocode.HitByBulletEvent.#ctor(System.Double,Robocode.Bullet)">
            <summary>
            Called by the game to create a new HitByBulletEvent.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Bearing">
            <summary>
            Returns the bearing to the bullet, relative to your robot's heading,
            in degrees (-180 &lt; getBearing() &lt;= 180).
            <p/>
            If you were to TurnRight(event.Bearing), you would be facing the
            direction the bullet came from. The calculation used here is:
            (bullet's heading in degrees + 180) - (your heading in degrees)
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.BearingRadians">
            <summary>
            Returns the bearing to the bullet, relative to your robot's heading,
            in radians (-Math.PI &lt; getBearingRadians() &lt;= Math.PI).
            <p/>
            If you were to TurnRightRadians(event.BearingRadians), you would be
            facing the direction the bullet came from. The calculation used here is:
            (bullet's heading in radians + Math.PI) - (your heading in radians)
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Bullet">
            <summary>
            Returns the bullet that hit your robot.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Heading">
            <summary>
            Returns the heading of the bullet when it hit you, in degrees
            (0 &lt;= getHeading() &lt; 360).
            <p/>
            Note: This is not relative to the direction you are facing. The robot
            that fired the bullet was in the opposite direction of getHeading() when
            it fired the bullet.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.HeadingRadians">
            <summary>
            Returns the heading of the bullet when it hit you, in radians
            (0 &lt;= getHeadingRadians() &lt; 2 * PI).
            <p/>
            Note: This is not relative to the direction you are facing. The robot
            that fired the bullet was in the opposite direction of
            getHeadingRadians() when it fired the bullet.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Name">
            <summary>
            Returns the name of the robot that fired the bullet.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Power">
            <summary>
            Returns the power of this bullet. The damage you take (in fact, already
            took) is 4 * power, plus 2 * (power-1) if power > 1. The robot that fired
            the bullet receives 3 * power back.
            </summary>
        </member>
        <member name="P:Robocode.HitByBulletEvent.Velocity">
            <summary>
            Returns the velocity of this bullet.
            </summary>
        </member>
        <member name="T:Robocode.HitRobotEvent">
            <summary>
            A HitRobotEvent is sent to <see cref="M:Robocode.Robot.OnHitRobot(Robocode.HitRobotEvent)"/>
            when your robot collides with another robot.
            You can use the information contained in this event to determine what to do.
            </summary>
        </member>
        <member name="M:Robocode.HitRobotEvent.#ctor(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Called by the game to create a new HitRobotEvent.
            </summary>
        </member>
        <member name="M:Robocode.HitRobotEvent.CompareTo(Robocode.Event)">
            <inheritdoc />
        </member>
        <member name="P:Robocode.HitRobotEvent.Bearing">
            <summary>
            Returns the bearing to the robot you hit, relative to your robot's
            heading, in degrees (-180 &lt;= getBearing() &lt; 180)
            </summary>
        </member>
        <member name="P:Robocode.HitRobotEvent.BearingRadians">
            <summary>
            Returns the bearing to the robot you hit, relative to your robot's
            heading, in radians (-PI &lt;= getBearingRadians() &lt; PI)
            </summary>
        </member>
        <member name="P:Robocode.HitRobotEvent.Energy">
            <summary>
            Returns the amount of energy of the robot you hit.
            </summary>
        </member>
        <member name="P:Robocode.HitRobotEvent.Name">
            <summary>
            Returns the name of the robot you hit.
            </summary>
        </member>
        <member name="P:Robocode.HitRobotEvent.IsMyFault">
            <summary>
            Checks if your robot was moving towards the robot that was hit.
            <p/>
            If <see cref="P:Robocode.HitRobotEvent.IsMyFault"/> returns true then your robot's movement (including
            turning) will have stopped and been marked complete.
            <p/>
            Note: If two robots are moving toward each other and collide, they will
            each receive two HitRobotEvents. The first will be the one if isMyFault()
            returns true.
            </summary>
        </member>
        <member name="T:Robocode.HitWallEvent">
            <summary>
            A HitWallEvent is sent to <see cref="M:Robocode.Robot.OnHitWall(Robocode.HitWallEvent)"/>
            when you collide a wall.
            You can use the information contained in this event to determine what to do.
            </summary>
        </member>
        <member name="M:Robocode.HitWallEvent.#ctor(System.Double)">
            <summary>
            Called by the game to create a new HitWallEvent.
            </summary>
        </member>
        <member name="P:Robocode.HitWallEvent.Bearing">
            <summary>
            Returns the bearing to the wall you hit, relative to your robot's
            heading, in degrees (-180 &lt;= getBearing() &lt; 180)
            </summary>
        </member>
        <member name="P:Robocode.HitWallEvent.BearingRadians">
            <summary>
            Returns the bearing to the wall you hit, relative to your robot's
            heading, in radians (-PI &lt;= getBearingRadians() &lt; PI)
            </summary>
        </member>
        <member name="T:Robocode.IBorderSentry">
            <summary>
            A robot that implement IBorderSentry is a robot type used for keeping other robots away from the borders,
            i.e. guarding the borders in order to prevent "wall crawlers".<br/>
            Robots that implement IBorderSentry have 400 extra life/energy (500 in total), but is placed at the border
            of the battlefield when the game is started.<br/>
            Border sentry robots cannot move away from the border area, and they can only make damage to robots that
            are moving into the border area. The size of the border area is determined by the
            <see cref="P:Robocode.BattleRules.SentryBorderSize">battle rules</see>.<br/>
            This type of robot is intended for use in battles where robots should be forced away from the borders in
            order to prevent "wall crawlers".<br/>
            Border sentry robots does not get scores, and will not occur in the battle results or rankings.
            </summary>
            <seealso cref="P:Robocode.BattleRules.SentryBorderSize"/>
            <seealso cref="T:Robocode.JuniorRobot"/>
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.TeamRobot"/>
            <seealso cref="T:Robocode.RateControlRobot"/>
            <seealso cref="T:Robocode.IDroid"/>
        </member>
        <member name="T:Robocode.IDroid">
            <summary>
            Robots that implement IDroid have no scanner, but an extra 20 life/energy.
            This class is intended for use in teams.
            <seealso cref="T:Robocode.JuniorRobot"/>
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.TeamRobot"/>
            <seealso cref="T:Robocode.RateControlRobot"/>
            <seealso cref="T:Robocode.IBorderSentry"/>
            </summary>
        </member>
        <member name="T:Robocode.IGraphics">
            <summary>
            <see cref="T:System.Drawing.Graphics"/>
            </summary>
        </member>
        <member name="T:Robocode.JuniorRobot">
            <summary>
            This is the simplest robot type, which is simpler than the <see cref="T:Robocode.Robot"/> and
            <see cref="T:Robocode.AdvancedRobot"/> classes. The JuniorRobot has a simplified model, in
            purpose of teaching programming skills to inexperienced in programming
            students. The simplified robot model will keep player from overwhelming of
            Robocode's rules, programming syntax and programming concept.
            <p/>
            Instead of using getters and setters, public fields are provided for
            receiving information like the last scanned robot, the coordinate of the
            robot etc.
            <p/>
            All methods on this class are blocking calls, i.e. they do not return before
            their action has been completed and will at least take one turn to execute.
            However, setting colors is executed immediately and does not cost a turn to
            perform.
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.TeamRobot"/>
            <seealso cref="T:Robocode.IDroid"/>
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.BLACK">
            <summary>
            The color black (0x000000)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.WHITE">
            <summary>
            The color white (0xFFFFFF)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.RED">
            <summary>
            The color red (0xFF0000)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.ORANGE">
            <summary>
            The color orange (0xFFA500)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.YELLOW">
            <summary>
            The color yellow (0xFFFF00)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.GREEN">
            <summary>
            The color green (0x008000)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.BLUE">
            <summary>
            The color blue (0x0000FF)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.PURPLE">
            <summary>
            The color purple (0x800080)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.BROWN">
            <summary>
            The color brown (0x8B4513)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.GRAY">
            <summary>
            The color gray (0x808080)
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.fieldWidth">
             <summary>
             Contains the width of the battlefield.
            
             <seealso cref="F:Robocode.JuniorRobot.fieldWidth"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.fieldHeight">
             <summary>
             Contains the height of the battlefield.
            
             <seealso cref="F:Robocode.JuniorRobot.fieldWidth"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.others">
            <summary>
            Current number of other robots on the battle field.
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.energy">
            <summary>
            Current energy of this robot, where 100 means full energy and 0 means no energy (dead).
            </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.robotX">
             <summary>
             Current horizontal location of this robot (in pixels).
            
             <seealso cref="F:Robocode.JuniorRobot.robotY"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.robotY">
             <summary>
             Current vertical location of this robot (in pixels).
            
             <seealso cref="F:Robocode.JuniorRobot.robotX"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.heading">
             <summary>
             Current heading angle of this robot (in degrees).
            
             <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.gunHeading">
             <summary>
             Current gun heading angle of this robot (in degrees).
            
             <seealso cref="F:Robocode.JuniorRobot.gunBearing"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.gunBearing">
             <summary>
             Current gun heading angle of this robot compared to its body (in degrees).
            
             <seealso cref="F:Robocode.JuniorRobot.gunHeading"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.gunReady">
             <summary>
             Flag specifying if the gun is ready to Fire, i.e. gun heat &lt;= 0.
             true means that the gun is able to Fire; false
             means that the gun cannot Fire yet as it still needs to cool down.
            
             <seealso cref="M:Robocode.JuniorRobot.Fire"/>
             <seealso cref="M:Robocode.JuniorRobot.Fire(System.Double)"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedDistance">
             <summary>
             Current distance to the scanned nearest other robot (in pixels).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedAngle"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedBearing"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedEnergy"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedVelocity"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedHeading"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedAngle">
             <summary>
             Current angle to the scanned nearest other robot (in degrees).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedDistance"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedBearing"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedEnergy"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedVelocity"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedHeading"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedBearing">
             <summary>
             Current angle to the scanned nearest other robot (in degrees) compared to
             the body of this robot.
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedDistance"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedAngle"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedEnergy"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedVelocity"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedHeading"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedVelocity">
             <summary>
             Current velocity of the scanned nearest other robot.
             If there is no robot in the radar's sight, this field will be -99.
             Note that a positive value means that the robot moves forward, a negative
             value means that the robot moved backward, and 0 means that the robot is
             not moving at all.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedDistance"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedAngle"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedBearing"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedEnergy"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedHeading"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedHeading">
             <summary>
             Current heading of the scanned nearest other robot (in degrees).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedDistance"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedAngle"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedBearing"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedEnergy"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedVelocity"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.scannedEnergy">
             <summary>
             Current energy of scanned nearest other robot.
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedDistance"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedAngle"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedBearing"/>
             <seealso cref="F:Robocode.JuniorRobot.scannedVelocity"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitByBulletAngle">
             <summary>
             Latest angle from where this robot was hit by a bullet (in degrees).
             If the robot has never been hit, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitByBullet"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitByBullet"/>
             <seealso cref="F:Robocode.JuniorRobot.hitByBulletBearing"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitByBulletBearing">
             <summary>
             Latest angle from where this robot was hit by a bullet (in degrees)
             compared to the body of this robot.
             If the robot has never been hit, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitByBullet"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitByBullet"/>
             <seealso cref="F:Robocode.JuniorRobot.hitByBulletAngle"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitRobotAngle">
             <summary>
             Latest angle where this robot has hit another robot (in degrees).
             If this robot has never hit another robot, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.hitRobotBearing"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitRobotBearing">
             <summary>
             Latest angle where this robot has hit another robot (in degrees)
             compared to the body of this robot.
             If this robot has never hit another robot, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitRobot"/>
             <seealso cref="F:Robocode.JuniorRobot.hitRobotAngle"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitWallAngle">
             <summary>
             Latest angle where this robot has hit a wall (in degrees).
             If this robot has never hit a wall, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitWall"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitWall"/>
             <seealso cref="F:Robocode.JuniorRobot.hitWallBearing"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.hitWallBearing">
             <summary>
             Latest angle where this robot has hit a wall (in degrees)
             compared to the body of this robot.
             If this robot has never hit a wall, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitWall"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitWall"/>
             <seealso cref="F:Robocode.JuniorRobot.hitWallAngle"/>
             </summary>
        </member>
        <member name="F:Robocode.JuniorRobot.innerEventHandler">
            <summary>
            The robot event handler for this robot.
            </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.Robocode#RobotInterfaces#IBasicRobot#SetOut(System.IO.TextWriter)">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.SetOut(System.IO.TextWriter)"/>
        </member>
        <member name="M:Robocode.JuniorRobot.Robocode#RobotInterfaces#IBasicRobot#SetPeer(Robocode.RobotInterfaces.Peer.IBasicRobotPeer)">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.SetPeer(Robocode.RobotInterfaces.Peer.IBasicRobotPeer)"/>
        </member>
        <member name="M:Robocode.JuniorRobot.UninitializedException">
            <summary>
            Throws a RobotException. This method should be called when the robot's peer
            is uninitialized.
            </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.Robocode#RobotInterfaces#IBasicRobot#GetRobotRunnable">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.GetRobotRunnable"/>
        </member>
        <member name="M:Robocode.JuniorRobot.Robocode#RobotInterfaces#IBasicRobot#GetBasicEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.IBasicRobot.GetBasicEventListener"/>
        </member>
        <member name="M:Robocode.JuniorRobot.Ahead(System.Int32)">
            <summary>
            Moves this robot forward by pixels.
            <seealso cref="M:Robocode.JuniorRobot.Back(System.Int32)"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
            </summary>
            <param name="distance">The amount of pixels to move forward</param> 
        </member>
        <member name="M:Robocode.JuniorRobot.Back(System.Int32)">
             <summary>
             Moves this robot backward by pixels.
            
             <seealso cref="M:Robocode.JuniorRobot.Ahead(System.Int32)"/>
             <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
             <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
             </summary>
             <param name="distance"> the amount of pixels to move backward</param> 
        </member>
        <member name="M:Robocode.JuniorRobot.BearGunTo(System.Int32)">
            <summary>
            Turns the gun to the specified angle (in degrees) relative to body of this robot.
            The gun will turn to the side with the shortest delta angle to the specified angle.
            <seealso cref="P:Robocode.JuniorRobot.GunHeading"/>
            <seealso cref="P:Robocode.JuniorRobot.GunBearing"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
            </summary>
            <param name="angle">the angle to turn the gun to relative to the body of this robot</param> 
        </member>
        <member name="M:Robocode.JuniorRobot.DoNothing">
            <summary>
            Skips a turn.
            <seealso cref="M:Robocode.JuniorRobot.DoNothing(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.DoNothing(System.Int32)">
            <summary>
            Skips the specified number of turns.
            <seealso cref="M:Robocode.JuniorRobot.DoNothing"/>
            </summary>
            <param name="turns">The number of turns to skip</param>
        </member>
        <member name="M:Robocode.JuniorRobot.Fire">
             <summary>
             Fires a bullet with the default power of 1.
             If the gun heat is more than 0 and hence cannot Fire, this method will
             suspend until the gun is ready to Fire, and then Fire a bullet.
            
             <seealso cref="!:GunReady"/>
             </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.Fire(System.Double)">
            <summary>
            Fires a bullet with the specified bullet power, which is between 0.1 and 3
            where 3 is the maximum bullet power.
            If the gun heat is more than 0 and hence cannot Fire, this method will
            suspend until the gun is ready to Fire, and then Fire a bullet.
            <seealso cref="!:GunReady"/>
            </summary>
            <param name="power">Between 0.1 and 3</param>
        </member>
        <member name="M:Robocode.JuniorRobot.OnHitByBullet">
             <summary>
             This event method is called from the game when this robot has been hit
             by another robot's bullet. When this event occurs the
             <see cref="P:Robocode.JuniorRobot.HitByBulletAngle"/> and <see cref="P:Robocode.JuniorRobot.HitByBulletBearing"/> fields values
             are automatically updated.
            
             <seealso cref="P:Robocode.JuniorRobot.HitByBulletAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.HitByBulletBearing"/>
             </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.OnHitRobot">
             <summary>
             This event method is called from the game when a bullet from this robot
             has hit another robot. When this event occurs the <see cref="P:Robocode.JuniorRobot.HitRobotAngle"/>
             and <see cref="P:Robocode.JuniorRobot.HitRobotBearing"/> fields values are automatically updated.
            
             <seealso cref="P:Robocode.JuniorRobot.HitRobotAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.HitRobotBearing"/>
             </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.OnHitWall">
             <summary>
             This event method is called from the game when this robot has hit a wall.
             When this event occurs the <see cref="P:Robocode.JuniorRobot.HitWallAngle"/> and
             <see cref="P:Robocode.JuniorRobot.HitWallBearing"/> fields values are automatically updated.
            
             <seealso cref="P:Robocode.JuniorRobot.HitWallAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.HitWallBearing"/>
             </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.OnScannedRobot">
            <summary>
            This event method is called from the game when the radar detects another
            robot. When this event occurs the <see cref="P:Robocode.JuniorRobot.ScannedDistance"/>,
            <see cref="P:Robocode.JuniorRobot.ScannedAngle"/>, <see cref="P:Robocode.JuniorRobot.ScannedBearing"/>, and <see cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
            field values are automatically updated.
            <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
            <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
            <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
            <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
            </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.Run">
            <summary>
            The main method in every robot. You must override this to set up your
            robot's basic behavior.
            <p/>
            <example>
              <code>
              // A basic robot that moves around in a square
              public void Run()
              {
                  Ahead(100);
                  TurnRight(90);
              }
              </code>
            </example>
            This method is automatically re-called when it has returned.
            </summary>
        </member>
        <member name="M:Robocode.JuniorRobot.SetColors(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the colors of the robot. The color values are RGB values.
            You can use the colors that are already defined for this class.
            <seealso cref="M:Robocode.JuniorRobot.SetColors(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="bodyColor">The RGB color value for the body</param>
            <param name="gunColor">The RGB color value for the gun</param>
            <param name="radarColor">The RGB color value for the radar</param>
        </member>
        <member name="M:Robocode.JuniorRobot.SetColors(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the colors of the robot. The color values are RGB values.
            You can use the colors that are already defined for this class.
            <seealso cref="M:Robocode.JuniorRobot.SetColors(System.Int32,System.Int32,System.Int32)"/>
            </summary>
            <param name="bodyColor">The RGB color value for the body</param>
            <param name="gunColor">The RGB color value for the gun</param>
            <param name="radarColor">The RGB color value for the radar</param>
            <param name="bulletColor">The RGB color value for the bullets</param>
            <param name="scanArcColor">The RGB color value for the scan arc</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)">
            <summary>
            Moves this robot forward by pixels and turns this robot left by degrees
            at the same time. The robot will move in a curve that follows a perfect
            circle, and the moving and turning will end at the same time.
            <p/>
            Note that the max. velocity and max. turn rate is automatically adjusted,
            which means that the robot will move slower the sharper the turn is
            compared to the distance.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="distance">The amount of pixels to move forward</param>
            <param name="degrees">The amount of degrees to turn to the left</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)">
            <summary>
            Moves this robot forward by pixels and turns this robot right by degrees
            at the same time. The robot will move in a curve that follows a perfect
            circle, and the moving and turning will end at the same time.
            <p/>
            Note that the max. velocity and max. turn rate is automatically adjusted,
            which means that the robot will move slower the sharper the turn is
            compared to the distance.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="distance">The amount of pixels to move forward</param>
            <param name="degrees">The amount of degrees to turn to the right</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)">
            <summary>
            Moves this robot backward by pixels and turns this robot left by degrees
            at the same time. The robot will move in a curve that follows a perfect
            circle, and the moving and turning will end at the same time.
            <p/>
            Note that the max. velocity and max. turn rate is automatically adjusted,
            which means that the robot will move slower the sharper the turn is
            compared to the distance.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="distance">The amount of pixels to move backward</param>
            <param name="degrees">The amount of degrees to turn to the left</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)">
            <summary>
            Moves this robot backward by pixels and turns this robot right by degrees
            at the same time. The robot will move in a curve that follows a perfect
            circle, and the moving and turning will end at the same time.
            <p/>
            Note that the max. velocity and max. turn rate is automatically adjusted,
            which means that the robot will move slower the sharper the turn is
            compared to the distance.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
            <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            </summary>
            <param name="distance">The amount of pixels to move backward</param>
            <param name="degrees">The amount of degrees to turn to the right</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)">
            <summary>
            Turns the gun left by degrees.
            <seealso cref="P:Robocode.JuniorRobot.GunHeading"/>
            <seealso cref="P:Robocode.JuniorRobot.GunBearing"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
            </summary>
            <param name="degrees">The amount of degrees to turn the gun to the left</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)">
            <summary>
            Turns the gun right by degrees.
            <seealso cref="P:Robocode.JuniorRobot.GunHeading"/>
            <seealso cref="P:Robocode.JuniorRobot.GunBearing"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
            </summary>
            <param name="degrees">The amount of degrees to turn the gun to the right</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)">
            <summary>
            Turns the gun to the specified angle (in degrees).
            The gun will turn to the side with the shortest delta angle to the
            specified angle.
            <seealso cref="P:Robocode.JuniorRobot.GunHeading"/>
            <seealso cref="P:Robocode.JuniorRobot.GunBearing"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
            </summary>
            <param name="angle">The angle to turn the gun to</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnLeft(System.Int32)">
            <summary>
            Turns this robot left by degrees.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="degrees">The amount of degrees to turn to the left</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnRight(System.Int32)">
            <summary>
            Turns this robot right by degrees.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="degrees">The amount of degrees to turn to the right</param>
        </member>
        <member name="M:Robocode.JuniorRobot.TurnTo(System.Int32)">
            <summary>
            Turns this robot to the specified angle (in degrees).
            The robot will turn to the side with the shortest delta angle to the
            specified angle.
            <seealso cref="P:Robocode.JuniorRobot.Heading"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
            <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
            </summary>
            <param name="angle">The angle to turn this robot to</param>
        </member>
        <member name="M:Robocode.JuniorRobot.getEventHandler">
            <summary>
            Returns the event handler of this robot.
            </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.Out">
            <summary>
            The Out stream your robot should use to print.
            <p/>
            You can view the print-outs by clicking the button for your robot in the
            right side of the battle window.
            <p/>
            <example>
              <code>
              // Print Out a line each time my robot hits another robot
              public void OnHitRobot(HitRobotEvent e)
              {
                  Out.WriteLine("I hit a robot!  My energy: " + Energy + " his energy: " + e.Energy);
              }
              </code>
            </example>
            </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.FieldWidth">
             <summary>
             Contains the width of the battlefield.
            
             <seealso cref="P:Robocode.JuniorRobot.FieldHeight"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.FieldHeight">
             <summary>
             Contains the height of the battlefield.
            
             <seealso cref="P:Robocode.JuniorRobot.FieldWidth"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.Others">
            <summary>
            Current number of other robots on the battle field.
            </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.Energy">
            <summary>
            Current energy of this robot, where 100 means full energy and 0 means no energy (dead).
            </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.RobotX">
             <summary>
             Current horizontal location of this robot (in pixels).
            
             <seealso cref="P:Robocode.JuniorRobot.RobotY"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.RobotY">
             <summary>
             Current vertical location of this robot (in pixels).
            
             <seealso cref="P:Robocode.JuniorRobot.RobotX"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.Heading">
             <summary>
             Current heading angle of this robot (in degrees).
            
             <seealso cref="M:Robocode.JuniorRobot.TurnLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnAheadLeft(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnAheadRight(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnBackLeft(System.Int32,System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnBackRight(System.Int32,System.Int32)"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.GunHeading">
             <summary>
             Current gun heading angle of this robot (in degrees).
            
             <seealso cref="P:Robocode.JuniorRobot.GunBearing"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.GunBearing">
             <summary>
             Current gun heading angle of this robot compared to its body (in degrees).
            
             <seealso cref="P:Robocode.JuniorRobot.GunHeading"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunLeft(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunRight(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.TurnGunTo(System.Int32)"/>
             <seealso cref="M:Robocode.JuniorRobot.BearGunTo(System.Int32)"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.IsGunReady">
             <summary>
             Flag specifying if the gun is ready to Fire, i.e. gun heat &lt;= 0.
             true means that the gun is able to Fire; false
             means that the gun cannot Fire yet as it still needs to cool down.
            
             <seealso cref="M:Robocode.JuniorRobot.Fire"/>
             <seealso cref="M:Robocode.JuniorRobot.Fire(System.Double)"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedDistance">
             <summary>
             Current distance to the scanned nearest other robot (in pixels).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedVelocity"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedHeading"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedAngle">
             <summary>
             Current angle to the scanned nearest other robot (in degrees).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedVelocity"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedHeading"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedBearing">
             <summary>
             Current angle to the scanned nearest other robot (in degrees) compared to
             the body of this robot.
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedVelocity"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedHeading"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedVelocity">
             <summary>
             Current velocity of the scanned nearest other robot.
             If there is no robot in the radar's sight, this field will be -99.
             Note that a positive value means that the robot moves forward, a negative
             value means that the robot moved backward, and 0 means that the robot is
             not moving at all.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedHeading"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedHeading">
             <summary>
             Current heading of the scanned nearest other robot (in degrees).
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedEnergy"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedVelocity"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.ScannedEnergy">
             <summary>
             Current energy of scanned nearest other robot.
             If there is no robot in the radar's sight, this field will be less than 0, i.e -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnScannedRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnScannedRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedDistance"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedAngle"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedBearing"/>
             <seealso cref="P:Robocode.JuniorRobot.ScannedVelocity"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitByBulletAngle">
             <summary>
             Latest angle from where this robot was hit by a bullet (in degrees).
             If the robot has never been hit, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitByBullet"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitByBullet"/>
             <seealso cref="P:Robocode.JuniorRobot.HitByBulletBearing"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitByBulletBearing">
             <summary>
             Latest angle from where this robot was hit by a bullet (in degrees)
             compared to the body of this robot.
             If the robot has never been hit, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitByBullet"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitByBullet"/>
             <seealso cref="P:Robocode.JuniorRobot.HitByBulletAngle"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitRobotAngle">
             <summary>
             Latest angle where this robot has hit another robot (in degrees).
             If this robot has never hit another robot, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.HitRobotBearing"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitRobotBearing">
             <summary>
             Latest angle where this robot has hit another robot (in degrees)
             compared to the body of this robot.
             If this robot has never hit another robot, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitRobot"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitRobot"/>
             <seealso cref="P:Robocode.JuniorRobot.HitRobotAngle"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitWallAngle">
             <summary>
             Latest angle where this robot has hit a wall (in degrees).
             If this robot has never hit a wall, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitWall"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitWall"/>
             <seealso cref="P:Robocode.JuniorRobot.HitWallBearing"/>
             </summary>
        </member>
        <member name="P:Robocode.JuniorRobot.HitWallBearing">
             <summary>
             Latest angle where this robot has hit a wall (in degrees)
             compared to the body of this robot.
             If this robot has never hit a wall, this field will be less than 0, i.e. -1.
             This field will not be updated while <see cref="M:Robocode.JuniorRobot.OnHitWall"/> event is active.
            
             <seealso cref="M:Robocode.JuniorRobot.OnHitWall"/>
             <seealso cref="P:Robocode.JuniorRobot.HitWallAngle"/>
             </summary>
        </member>
        <member name="T:Robocode.JuniorRobot.InnerEventHandler">
            <summary>
            The JuniorRobot event handler, which extends the basic robot events,
            IBasicEvents, and IRunnable.
            </summary>
        </member>
        <member name="T:Robocode.KeyEvent">
            <summary>
            Super class of all events that originates from the keyboard.
            </summary>
        </member>
        <member name="M:Robocode.KeyEvent.#ctor(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by game
            </summary>
        </member>
        <member name="P:Robocode.KeyEvent.KeyChar">
            <summary>
            Char of they key pressed
            </summary>
        </member>
        <member name="P:Robocode.KeyEvent.KeyCode">
            <summary>
            <see cref="T:Robocode.Keys"/>
            </summary>
        </member>
        <member name="P:Robocode.KeyEvent.When">
            <summary>
            Age of the event
            </summary>
        </member>
        <member name="T:Robocode.KeyPressedEvent">
            <summary>
            A KeyPressedEvent is sent to <see cref="M:Robocode.Robot.OnKeyPressed(Robocode.KeyEvent)"/>
            when a key has been pressed on the keyboard.
            <seealso cref="T:Robocode.KeyReleasedEvent"/>
            <seealso cref="T:Robocode.KeyTypedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.KeyPressedEvent.#ctor(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new KeyPressedEvent.
            </summary>
        </member>
        <member name="T:Robocode.KeyReleasedEvent">
            <summary>
            A KeyReleasedEvent is sent to <see cref="M:Robocode.Robot.OnKeyReleased(Robocode.KeyEvent)"/>
            when a key has been released on the keyboard.
            <seealso cref="T:Robocode.KeyPressedEvent"/>
            <seealso cref="T:Robocode.KeyTypedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.KeyReleasedEvent.#ctor(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new KeyReleasedEvent.
            </summary>
        </member>
        <member name="T:Robocode.Keys">
            <exclude/>
        </member>
        <member name="T:Robocode.KeyTypedEvent">
            <summary>
            A KeyTypedEvent is sent to <see cref="M:Robocode.Robot.OnKeyTyped(Robocode.KeyEvent)"/>
            when a key has been typed (pressed and released) on the keyboard.
            <seealso cref="T:Robocode.KeyPressedEvent"/>
            <seealso cref="T:Robocode.KeyReleasedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.KeyTypedEvent.#ctor(System.Char,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new KeyTypedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MessageEvent">
            <summary>
            A MessageEvent is sent to <see cref="M:Robocode.TeamRobot.OnMessageReceived(Robocode.MessageEvent)"/>
            when a teammate sends a message to your robot.
            You can use the information contained in this event to determine what to do.
            </summary>
        </member>
        <member name="M:Robocode.MessageEvent.#ctor(System.String,System.Object)">
            <summary>
            Called by the game to create a new MessageEvent.
            </summary>
        </member>
        <member name="P:Robocode.MessageEvent.Sender">
            <summary>
            Returns the name of the sending robot.
            </summary>
        </member>
        <member name="P:Robocode.MessageEvent.Message">
            <summary>
            Returns the message itself.
            </summary>
        </member>
        <member name="T:Robocode.MouseClickedEvent">
            <summary>
            A MouseClickedEvent is sent to <see cref="M:Robocode.Robot.OnMouseClicked(Robocode.MouseEvent)"/>
            when the mouse is clicked inside the battle view.
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="T:Robocode.MouseEvent">
            <summary>
            Super class of all events that originates from the mouse.
            </summary>
        </member>
        <member name="M:Robocode.MouseEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseEvent.
            </summary>
        </member>
        <member name="P:Robocode.MouseEvent.Button">
            <summary>
            Number of the button
            </summary>
        </member>
        <member name="P:Robocode.MouseEvent.ClickCount">
            <summary>
            Click count
            </summary>
        </member>
        <member name="P:Robocode.MouseEvent.X">
            <summary>
            Cursor coordinates
            </summary>
        </member>
        <member name="P:Robocode.MouseEvent.Y">
            <summary>
            Cursor coordinates
            </summary>
        </member>
        <member name="P:Robocode.MouseEvent.When">
            <summary>
            Age of the event
            </summary>
        </member>
        <member name="M:Robocode.MouseClickedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseClickedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseDraggedEvent">
            <summary>
            A MouseDraggedEvent is sent to <see cref="M:Robocode.Robot.OnMouseDragged(Robocode.MouseEvent)"/>
            when the mouse is dragged inside the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseDraggedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseEnteredEvent">
            <summary>
            A MouseEnteredEvent is sent to <see cref="M:Robocode.Robot.OnMouseEntered(Robocode.MouseEvent)"/>
            when the mouse has entered the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseEnteredEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseExitedEvent">
            <summary>
            A MouseExitedEvent is sent to <see cref="M:Robocode.Robot.OnMouseExited(Robocode.MouseEvent)"/>
            when the mouse has exited the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseExitedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseMovedEvent">
            <summary>
            A MouseMovedEvent is sent to <see cref="M:Robocode.Robot.OnMouseMoved(Robocode.MouseEvent)"/>
            when the mouse has moved inside the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseMovedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MousePressedEvent">
            <summary>
            A MousePressedEvent is sent to <see cref="M:Robocode.Robot.OnMousePressed(Robocode.MouseEvent)"/>
            when the mouse is pressed inside the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MousePressedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseReleasedEvent">
            <summary>
            A MouseReleasedEvent is sent to <see cref="M:Robocode.Robot.OnMouseReleased(Robocode.MouseEvent)"/>
            when the mouse is released inside the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            <seealso cref="T:Robocode.MouseWheelMovedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseReleasedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseDraggedEvent.
            </summary>
        </member>
        <member name="T:Robocode.MouseWheelMovedEvent">
            <summary>
            A MouseWheelMovedEvent is sent to <see cref="M:Robocode.Robot.OnMouseWheelMoved(Robocode.MouseWheelMovedEvent)"/>
            when the mouse wheel is rotated inside the battle view.
            <seealso cref="T:Robocode.MouseClickedEvent"/>
            <seealso cref="T:Robocode.MousePressedEvent"/>
            <seealso cref="T:Robocode.MouseReleasedEvent"/>
            <seealso cref="T:Robocode.MouseEnteredEvent"/>
            <seealso cref="T:Robocode.MouseExitedEvent"/>
            <seealso cref="T:Robocode.MouseMovedEvent"/>
            <seealso cref="T:Robocode.MouseDraggedEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.MouseWheelMovedEvent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Called by the game to create a new MouseWheelMovedEvent.
            </summary>
        </member>
        <member name="P:Robocode.MouseWheelMovedEvent.WheelRotation">
            <summary>
            Indicates how far the mouse wheel was rotated.
            </summary>
        </member>
        <member name="T:Robocode.MoveCompleteCondition">
            <summary>
            A prebuilt condition you can use that indicates your robot has finished moving.
            <seealso cref="T:Robocode.Condition"/>
            </summary>
        </member>
        <member name="M:Robocode.MoveCompleteCondition.#ctor(Robocode.AdvancedRobot)">
            <summary>
            Creates a new MoveCompleteCondition with default priority.
            The default priority is 80.
            </summary>
            <param name="robot">Your robot, which must be a <see cref="T:Robocode.AdvancedRobot"/></param>
        </member>
        <member name="M:Robocode.MoveCompleteCondition.#ctor(Robocode.AdvancedRobot,System.Int32)">
            <summary>
            Creates a new MoveCompleteCondition with the specified priority.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            <seealso cref="P:Robocode.Condition.Priority"/>
            </summary>
            <param name="robot">Your robot, which must be a <see cref="T:Robocode.AdvancedRobot"/></param>
            <param name="priority">The priority of this condition</param>
        </member>
        <member name="M:Robocode.MoveCompleteCondition.Test">
            <summary>
            Tests if the robot has stopped moving.
            Returns true if the robot has stopped moving
            </summary>
        </member>
        <member name="T:Robocode.PaintEvent">
            <summary>
            This event occurs when your robot should paint, where the 
            <see cref="M:Robocode.Robot.OnPaint(Robocode.IGraphics)"/> is called on your robot.
            <p/>
            You can use this event for setting the event priority by calling
            <see cref="M:Robocode.AdvancedRobot.SetEventPriority(System.String,System.Int32)"/>
            </summary>
        </member>
        <member name="T:Robocode.RadarTurnCompleteCondition">
            <summary>
            A prebuilt condition you can use that indicates your radar has finished turning.
            <seealso cref="T:Robocode.Condition"/>
            </summary>
        </member>
        <member name="M:Robocode.RadarTurnCompleteCondition.#ctor(Robocode.AdvancedRobot)">
            <summary>
            Creates a new RadarTurnCompleteCondition with default priority.
            The default priority is 80.
            </summary>
            <param name="robot">Your robot, which must be a <see cref="T:Robocode.AdvancedRobot"/></param>
        </member>
        <member name="M:Robocode.RadarTurnCompleteCondition.#ctor(Robocode.AdvancedRobot,System.Int32)">
            <summary>
            Creates a new RadarTurnCompleteCondition with the specified priority.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            <seealso cref="P:Robocode.Condition.Priority"/>
            </summary>
            <param name="robot">Your robot, which must be a <see cref="T:Robocode.AdvancedRobot"/></param>
            <param name="priority">The priority of this condition</param>
        </member>
        <member name="M:Robocode.RadarTurnCompleteCondition.Test">
            <summary>
            Tests if the radar has stopped turning.
            Returns true if the radar has stopped turning; false otherwise
            </summary>
        </member>
        <member name="T:Robocode.RateControlRobot">
            <summary>
              This advanced robot type allows you to set a rate for each of the robot's movements.
              <p/>
              You can set the rate for:
              <ul>
                <li>velocity - pixels per turn</li>
                <li>robot turn - radians per turn</li>
                <li>gun rotation - radians per turn</li>
                <li>radar rotation - radians per turn</li>
              </ul>
              When you set a rate for one of the above movements, the movement will continue the move by
              specified rate for ever, until the rate is changed. In order to move ahead or right, the
              rate must be set to a positive value. If a negative value is used instead, the movement
              will go back or to the left. In order to stop the movement, the rate must be
              set to 0.
              <para/>
              Note: When calling <see cref="P:Robocode.RateControlRobot.VelocityRate"/>, <see cref="P:Robocode.RateControlRobot.TurnRate"/>,
              <see cref="P:Robocode.RateControlRobot.GunRotationRate"/>, <see cref="P:Robocode.RateControlRobot.RadarRotationRate"/> and variants,
              any previous calls to "movement" functions outside of <see cref="T:Robocode.RateControlRobot"/>,
              such as <see cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>,
              <see cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>,
              <see cref="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)"/>  and similar will be
              overridden when calling the <see cref="M:Robocode.RateControlRobot.Execute"/> on this robot class.
              <p/>
              Look into the source code for the samplecs.VelociRobot in order to see how to use this
              robot type.
            <seealso cref="T:Robocode.JuniorRobot"/>
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.TeamRobot"/>
            <seealso cref="T:Robocode.IDroid"/>
            <seealso cref="T:Robocode.IBorderSentry"/>
            </summary>
        </member>
        <member name="T:Robocode.TeamRobot">
            <summary>
            An advanced type of robot that supports sending messages between team
            mates in a robot team.
            <p/>
            If you have not done already, you should create a <see cref="T:Robocode.Robot"/> or
            <see cref="T:Robocode.AdvancedRobot"/> first.
            <seealso cref="T:Robocode.JuniorRobot"/>
            <seealso cref="T:Robocode.Robot"/>
            <seealso cref="T:Robocode.AdvancedRobot"/>
            <seealso cref="T:Robocode.RateControlRobot"/>
            <seealso cref="T:Robocode.IDroid"/>
            <seealso cref="T:Robocode.IBorderSentry"/>
            </summary>
        </member>
        <member name="M:Robocode.TeamRobot.BroadcastMessage(System.Object)">
            <summary>
            Broadcasts a message to all teammates.
            <p/>
            <example>
              <code>
              public void Run()
              {
                  BroadcastMessage("I'm here!");
              }
              </code>
            </example>
            </summary>
            <param name="message">The message to broadcast to all teammates
            if the message could not be broadcasted to the teammates.
            </param>
            <seealso cref="M:Robocode.TeamRobot.IsTeammate(System.String)"/>
            <seealso cref="P:Robocode.TeamRobot.Teammates"/>
            <seealso cref="M:Robocode.TeamRobot.SendMessage(System.String,System.Object)"/>
        </member>
        <member name="M:Robocode.TeamRobot.GetMessageEvents">
            <summary>
            Returns a list containing all MessageEvents currently in the robot's queue.
            You might, for example, call this while processing another event.
            <p/>
            <example>
              <code>
              foreach (MessageEvent e in GetMessageEvents())
              {
                  // do something with e
              }
              </code>
            </example>
            <seealso cref="M:Robocode.TeamRobot.OnMessageReceived(Robocode.MessageEvent)"/>
            <seealso cref="T:Robocode.MessageEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.TeamRobot.Robocode#RobotInterfaces#ITeamRobot#GetTeamEventListener">
            <inheritdoc cref="M:Robocode.RobotInterfaces.ITeamRobot.GetTeamEventListener"/>
        </member>
        <member name="M:Robocode.TeamRobot.IsTeammate(System.String)">
            <summary>
            Checks if a given robot name is the name of one of your teammates.
            <p/>
            <example>
              <code>
              public void OnScannedRobot(ScannedRobotEvent e)
              {
                  if (IsTeammate(e.Name)
                  {
                      return;
                  }
                  Fire(1);
              }
              </code>
            </example>
            <seealso cref="P:Robocode.TeamRobot.Teammates"/>
            <seealso cref="M:Robocode.TeamRobot.BroadcastMessage(System.Object)"/>
            <seealso cref="M:Robocode.TeamRobot.SendMessage(System.String,System.Object)"/>
            </summary>
            <param name="name">The robot name to check</param> 
        </member>
        <member name="M:Robocode.TeamRobot.OnMessageReceived(Robocode.MessageEvent)">
            <inheritdoc />
        </member>
        <member name="M:Robocode.TeamRobot.SendMessage(System.String,System.Object)">
            <summary>
            Sends a message to one (or more) teammates.
            <p/>
            <example>
              <code>
              public void Run()
              {
                  SendMessage("Sample.DroidBot", "I'm here!");
              }
              </code>
            </example>
            <seealso cref="M:Robocode.TeamRobot.IsTeammate(System.String)"/>
            <seealso cref="P:Robocode.TeamRobot.Teammates"/>
            <seealso cref="M:Robocode.TeamRobot.BroadcastMessage(System.Object)"/>
            </summary>
            <param name="name">The name of the intended recipient of the message</param>
            <param name="message">The message to send</param>
        </member>
        <member name="P:Robocode.TeamRobot.Teammates">
            <summary>
            Returns the names of all teammates, or null there is no teammates.
            The length of the string array is equal to the number of teammates.
            <p/>
            <example>
              <code>
              public void Run()
              {
                  // Prints Out all teammates
                  string[] teammates = GetTeammates();
                  if (teammates != null)
                  {
                      foreach (string member in teammates)
                      {
                          Out.WriteLine(member);
                      }
                  }
              }
              </code>
            </example>
            <seealso cref="M:Robocode.TeamRobot.IsTeammate(System.String)"/>
            <seealso cref="M:Robocode.TeamRobot.BroadcastMessage(System.Object)"/>
            <seealso cref="M:Robocode.TeamRobot.SendMessage(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:Robocode.RateControlRobot.Execute">
            <summary>
              Executes any pending actions, or continues executing actions that are
              in process. This call returns after the actions have been started.
              <p/>
              Note that advanced robots <em>must</em> call this function in order to
              Execute pending set* calls like e.g. <see cref="P:Robocode.RateControlRobot.VelocityRate"/>,
              <see cref="M:Robocode.AdvancedRobot.SetFire(System.Double)"/>, <see cref="P:Robocode.RateControlRobot.TurnRate"/>
              etc. Otherwise, these calls will never get executed.
              <p/>
              Any previous calls to "movement" functions outside of
              <see cref="T:Robocode.RateControlRobot"/>, such as
              <see cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>,
              <see cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>,
              <see cref="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)"/>
              etc. will be overridden when this method is called on this robot class.
              <p/>
              <example>
                In this example the robot will move while turning:
                <code>
                VelocityRate = 6;
                TurnRate = 7;
            
                while (true)
                {
                    Execute();
                }
                </code>
              </example>
            </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.VelocityRate">
             
            <summary>
              The speed the robot will move (forward), in pixels per turn.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot will move backwards
              <p/>
              <example>
                <code>
                // Set the robot to move forward 2 pixels per turn
                VelocityRate = 2;
            
                // Set the robot to move backwards 8 pixels per turn
                // (overrides the previous order)
                VelocityRate = -8;
            
                ...
                // Executes the last VelocityRate
                Execute();
                </code>
              </example>
              Note: This method overrules <see cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/> and
              <see cref="M:Robocode.AdvancedRobot.SetBack(System.Double)"/>
              <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
              <seealso cref="P:Robocode.RateControlRobot.TurnRate"/>
              <seealso cref="P:Robocode.RateControlRobot.GunRotationRate"/>
              <seealso cref="P:Robocode.RateControlRobot.RadarRotationRate"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetAhead(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetBack(System.Double)"/>
            </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.TurnRate">
             
            <summary>
              The robot's clockwise (right) rotation per turn, in degrees.
              <p/>
              This call returns immediately, and will not execute until you call
              Execute() or take an action that executes.
              <p/>
              Note that both positive and negative values can be given as input,
              where negative values means that the robot turns counterclockwise (left)
              <p/>
              <example>
                <code>
                // Set the robot to turn right 10 degrees per turn
                TurnRate = 10;
            
                // Set the robot to turn left 4 degrees per turn
                // (overrides the previous order)
                TurnRate = -5;
            
                ...
                // Executes the last TurnRate
                Execute();
                </code>
              </example>
              <seealso cref="P:Robocode.RateControlRobot.TurnRate"/>
              <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
              <seealso cref="P:Robocode.RateControlRobot.GunRotationRate"/>
              <seealso cref="P:Robocode.RateControlRobot.RadarRotationRate"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnRight(System.Double)"/>
              <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeft(System.Double)"/>
            </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.TurnRateRadians">
             <summary>
               The robot's clockwise (right) rotation per turn, in radians.
               <p/>
               This call returns immediately, and will not execute until you call
               Execute() or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the robot turns counterclockwise (left)
               <p/>
               <example>
                 <code>
                 // Set the robot to turn right pi / 32 radians per turn
                 TurnRateRadians = Math.PI / 32;
            
                 // Set the robot to turn left pi / 20 radians per turn
                 // (overrides the previous order)
                 TurnRateRadians = -Math.PI / 20;
            
                 ...
                 // Executes the last TurnRateRadians
                 Execute();
                 </code>
               </example>
             
               <seealso cref="P:Robocode.RateControlRobot.TurnRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
               <seealso cref="P:Robocode.RateControlRobot.GunRotationRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.RadarRotationRateRadians"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnRightRadians(System.Double)"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnLeftRadians(System.Double)"/>
             </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.GunRotationRate">
             <summary>
               The gun's clockwise (right) rotation per turn, in degrees.
               <p/>
               This call returns immediately, and will not execute until you call
               Execute() or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the gun turns counterclockwise (left)
               <p/>
               <example>
                 <code>
                 // Set the gun to turn right 15 degrees per turn
                 GunRotationRate = 15;
            
                 // Set the gun to turn left 9 degrees per turn
                 // (overrides the previous order)
                 GunRotationRate = -9;
            
                 ...
                 // Executes the last GunRotationRate()
                 Execute();
                 </code>
               </example>
               <seealso cref="P:Robocode.RateControlRobot.GunRotationRate"/>
               <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
               <seealso cref="P:Robocode.RateControlRobot.TurnRate"/>
               <seealso cref="P:Robocode.RateControlRobot.RadarRotationRate"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRight(System.Double)"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeft(System.Double)"/>
             </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.GunRotationRateRadians">
             <summary>
               The gun's clockwise (right) rotation per turn, in radians.
               <p/>
               This call returns immediately, and will not execute until you call
               Execute() or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the gun turns counterclockwise (left)
               <p/>
               <example>
                 <code>
                 // Set the gun to turn right pi / 16 radians per turn
                 GunRotationRateRadians = Math.PI / 16;
            
                 // Set the gun to turn left pi / 12 radians per turn
                 // (overrides the previous order)
                 GunRotationRateRadians = -Math.PI / 12;
            
                 ...
                 // Executes the last GunRotationRateRadians
                 Execute();
                 </code>
               </example>
               <seealso cref="P:Robocode.RateControlRobot.GunRotationRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
               <seealso cref="P:Robocode.RateControlRobot.TurnRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.RadarRotationRateRadians"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunRightRadians(System.Double)"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnGunLeftRadians(System.Double)"/>
             </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.RadarRotationRate">
             <summary>
               The radar's clockwise (right) rotation per turn, in degrees.
               <p/>
               This call returns immediately, and will not execute until you call
               Execute() or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the radar turns counterclockwise (left)
               <p/>
               <example>
                 <code>
                 // Set the radar to turn right 45 degrees per turn
                 RadarRotationRate = 45;
            
                 // Set the radar to turn left 15 degrees per turn
                 // (overrides the previous order)
                 RadarRotationRate = -15;
            
                 ...
                 // Executes the last RadarRotationRate
                 Execute();
                 </code>
               </example>
               <seealso cref="P:Robocode.RateControlRobot.RadarRotationRate"/>
               <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
               <seealso cref="P:Robocode.RateControlRobot.TurnRate"/>
               <seealso cref="P:Robocode.RateControlRobot.GunRotationRate"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRight(System.Double)"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeft(System.Double)"/>
             </summary>
        </member>
        <member name="P:Robocode.RateControlRobot.RadarRotationRateRadians">
             <summary>
               The radar's clockwise (right) rotation per turn, in radians.
               <p/>
               This call returns immediately, and will not execute until you call
               Execute() or take an action that executes.
               <p/>
               Note that both positive and negative values can be given as input,
               where negative values means that the radar turns counterclockwise (left)
               <p/>
               <example>
                 <code>
                 // Set the radar to turn right pi / 4 radians per turn
                 RadarRotationRateRadians = Math.PI / 4;
            
                 // Set the radar to turn left pi / 8 radians per turn
                 // (overrides the previous order)
                 RadarRotationRateRadians = -Math.PI / 8;
            
                 ...
                 // Executes the last RadarRotationRateRadians
                 Execute();
                 </code>
               </example>
               <seealso cref="P:Robocode.RateControlRobot.RadarRotationRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.VelocityRate"/>
               <seealso cref="P:Robocode.RateControlRobot.TurnRateRadians"/>
               <seealso cref="P:Robocode.RateControlRobot.GunRotationRateRadians"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarRightRadians(System.Double)"/>
               <seealso cref="M:Robocode.AdvancedRobot.SetTurnRadarLeftRadians(System.Double)"/>
             </summary>
        </member>
        <member name="T:Robocode.RobotDeathEvent">
            <summary>
            This event is sent to <see cref="M:Robocode.Robot.OnRobotDeath(Robocode.RobotDeathEvent)"/>
            when another robot (not your robot) dies.
            </summary>
        </member>
        <member name="M:Robocode.RobotDeathEvent.#ctor(System.String)">
            <summary>
            Called by the game to create a new RobotDeathEvent.
            </summary>
            <param name="robotName">the name of the robot that died</param>
        </member>
        <member name="P:Robocode.RobotDeathEvent.Name">
            <summary>
            Returns the name of the robot that died.
            </summary>
        </member>
        <member name="T:Robocode.RobotStatus">
            <summary>
            Contains the status of a robot for a specific time/turn returned by
            <see cref="P:Robocode.StatusEvent.Status"/>.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.Energy">
            <summary>
            Returns the robot's current energy.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.X">
            <summary>
            Returns the X position of the robot. (0,0) is at the bottom left of the
            battlefield.
            </summary>
            <seealso cref="P:Robocode.RobotStatus.Y"/>
        </member>
        <member name="P:Robocode.RobotStatus.Y">
            <summary>
            Returns the Y position of the robot. (0,0) is at the bottom left of the
            battlefield.
            <seealso cref="P:Robocode.RobotStatus.X"/>
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.HeadingRadians">
            <summary>
            Returns the direction that the robot's body is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.Heading">
            <summary>
            Returns the direction that the robot's body is facing, in degrees.
            The value returned will be between 0 and 360 (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            90 means East, 180 means South, and 270 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.GunHeadingRadians">
            <summary>
            Returns the direction that the robot's gun is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.GunHeading">
            <summary>
            Returns the direction that the robot's gun is facing, in degrees.
            The value returned will be between 0 and 360 (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            90 means East, 180 means South, and 270 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.RadarHeadingRadians">
            <summary>
            Returns the direction that the robot's radar is facing, in radians.
            The value returned will be between 0 and 2 * PI (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            PI / 2 means East, PI means South, and 3 * PI / 2 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.RadarHeading">
            <summary>
            Returns the direction that the robot's radar is facing, in degrees.
            The value returned will be between 0 and 360 (is excluded).
            <p/>
            Note that the heading in Robocode is like a compass, where 0 means North,
            90 means East, 180 means South, and 270 means West.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.Velocity">
            <summary>
            Returns the velocity of the robot measured in pixels/turn.
            <p/>
            The maximum velocity of a robot is defined by <see cref="F:Robocode.Rules.MAX_VELOCITY"/>
            (8 pixels / turn).
            <seealso cref="F:Robocode.Rules.MAX_VELOCITY"/>
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.TurnRemainingRadians">
            <summary>
            Returns the angle remaining in the robots's turn, in radians.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the robot is currently turning to the right.
            Negative values means that the robot is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.TurnRemaining">
            <summary>
            Returns the angle remaining in the robots's turn, in degrees.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the robot is currently turning to the right.
            Negative values means that the robot is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.RadarTurnRemainingRadians">
            <summary>
            Returns the angle remaining in the radar's turn, in radians.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the radar is currently turning to the right.
            Negative values means that the radar is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.RadarTurnRemaining">
            <summary>
            Returns the angle remaining in the radar's turn, in degrees.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the radar is currently turning to the right.
            Negative values means that the radar is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.GunTurnRemainingRadians">
            <summary>
            Returns the angle remaining in the gun's turn, in radians.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the gun is currently turning to the right.
            Negative values means that the gun is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.GunTurnRemaining">
            <summary>
            Returns the angle remaining in the gun's turn, in degrees.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the gun is currently turning to the right.
            Negative values means that the gun is currently turning to the left.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.DistanceRemaining">
            <summary>
            Returns the distance remaining in the robot's current move measured in
            pixels.
            <p/>
            This call returns both positive and negative values.
            Positive values means that the robot is currently moving forwards.
            Negative values means that the robot is currently moving backwards.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.GunHeat">
            <summary>
            Returns the current heat of the gun. The gun cannot Fire unless this is
            0. (Calls to Fire will succeed, but will not actually Fire unless
            GetGunHeat() == 0).
            <p/>
            The amount of gun heat generated when the gun is fired is
            1 + (firePower / 5). Each turn the gun heat drops by the amount returned
            by <see cref="P:Robocode.Robot.GunCoolingRate"/>, which is a battle setup.
            <p/>
            Note that all guns are "hot" at the start of each round, where the gun
            heat is 3.
            </summary>
            <seealso cref="P:Robocode.Robot.GunCoolingRate"/>
            <seealso cref="M:Robocode.Robot.Fire(System.Double)"/>
            <seealso cref="M:Robocode.Robot.FireBullet(System.Double)"/>
        </member>
        <member name="P:Robocode.RobotStatus.Others">
            <summary>
            Returns how many opponents that are left in the current round.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.NumSentries">
            <summary>
            Returns how many sentry robots that are left in the current round.
            </summary>
        </member>
        <member name="P:Robocode.RobotStatus.NumRounds">
            <summary>
            Returns the number of rounds in the current battle.
            </summary>
            <seealso cref="P:Robocode.RobotStatus.RoundNum"/>
        </member>
        <member name="P:Robocode.RobotStatus.RoundNum">
            <summary>
            Returns the current round number (0 to <see cref="P:Robocode.RobotStatus.NumRounds"/> - 1) of
            the battle.
            </summary>
            <seealso cref="P:Robocode.RobotStatus.NumRounds"/>
        </member>
        <member name="P:Robocode.RobotStatus.Time">
            <summary>
            Returns the game time of the round, where the time is equal to the current turn in the round.
            </summary>
        </member>
        <member name="T:Robocode.RoundEndedEvent">
            <summary>
              A RoundEndedEvent is sent to <see cref="M:Robocode.Robot.OnRoundEnded(Robocode.RoundEndedEvent)"/> when a round has ended.
              You can use the information contained in this event to determine which round that has ended.
              <seealso cref="M:Robocode.Robot.OnRoundEnded(Robocode.RoundEndedEvent)"/>
            </summary>
        </member>
        <member name="M:Robocode.RoundEndedEvent.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
              Called by the game to create a new RoundEndedEvent.
            </summary>
            <param name="round">The round that has ended (zero-indexed)</param>
            <param name="turns">The number of turns that this round reached</param>
            <param name="totalTurns">The total number of turns reached in the battle when this round ended</param>
        </member>
        <member name="P:Robocode.RoundEndedEvent.Round">
            <value>
              The round that ended (zero-indexed).
            </value>
        </member>
        <member name="P:Robocode.RoundEndedEvent.Turns">
            <value>
              The number of turns that this round reached.
            </value>
        </member>
        <member name="P:Robocode.RoundEndedEvent.TotalTurns">
            <value>
              The total number of turns reached in the battle when this round ended.
            </value>
        </member>
        <member name="P:Robocode.RoundEndedEvent.Priority">
            <inheritdoc />
        </member>
        <member name="T:Robocode.Rules">
            <summary>
            Constants and methods that defines the rules of Robocode.
            Constants are used for rules that will not change.
            Methods are provided for rules that can be changed between battles or which depends
            on some other factor.
            </summary>
        </member>
        <member name="F:Robocode.Rules.ACCELERATION">
            <summary>
            The acceleration of a robot, i.e. the increase of velocity when the
            robot moves forward, which is 1 pixel/turn.
            </summary>
        </member>
        <member name="F:Robocode.Rules.DECELERATION">
            <summary>
            The deceleration of a robot, i.e. the decrease of velocity when the
            robot moves backwards (or brakes), which is 2 pixels/turn.
            </summary>
        </member>
        <member name="F:Robocode.Rules.MAX_VELOCITY">
            <summary>
            The maximum velocity of a robot, which is 8 pixels/turn.
            </summary>
        </member>
        <member name="F:Robocode.Rules.RADAR_SCAN_RADIUS">
            <summary>
            The radar scan radius, which is 1200 pixels.
            Robots which is more than 1200 pixels away cannot be seen on the radar.
            </summary>
        </member>
        <member name="F:Robocode.Rules.MIN_BULLET_POWER">
            <summary>
            The minimum bullet power, i.e the amount of energy required for firing a
            bullet, which is 0.1 energy points.
            </summary>
        </member>
        <member name="F:Robocode.Rules.MAX_BULLET_POWER">
            <summary>
            The maximum bullet power, i.e. the maximum amount of energy that can be
            transferred to a bullet when it is fired, which is 3 energy points.
            </summary>
        </member>
        <member name="F:Robocode.Rules.MAX_TURN_RATE">
            <summary>
            The maximum turning rate of the robot, in degrees, which is
            10 degress/turn.
            Note, that the turn rate of the robot depends on it's velocity.
            <seealso cref="F:Robocode.Rules.MAX_TURN_RATE_RADIANS"/>
            <seealso cref="M:Robocode.Rules.GetTurnRate(System.Double)"/>
            <seealso cref="M:Robocode.Rules.GetTurnRateRadians(System.Double)"/>
            </summary>
        </member>
        <member name="F:Robocode.Rules.MAX_TURN_RATE_RADIANS">
             <summary>
             The maximum turning rate of the robot measured in radians instead of
             degrees.
            
             <seealso cref="F:Robocode.Rules.MAX_TURN_RATE"/>
             <seealso cref="M:Robocode.Rules.GetTurnRate(System.Double)"/>
             <seealso cref="M:Robocode.Rules.GetTurnRateRadians(System.Double)"/>
             </summary>
        </member>
        <member name="F:Robocode.Rules.GUN_TURN_RATE">
             <summary>
             The turning rate of the gun measured in degrees, which is 20 degrees/turn.
             Note, that if AdjustGunForRobotTurn = true has been set, the gun turn is
             independent of the robot turn. In this case the gun moves relatively to the screen.
             <p/>
             If AdjustGunForRobotTurn = false has been set or AdjustGunForRobotTurn has not
             been called at all (this is the default), then the gun turn is dependent on
             the robot turn, and in this case the gun moves relatively to the robot body.
            
             <seealso cref="F:Robocode.Rules.GUN_TURN_RATE_RADIANS"/>
             <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
             </summary>
        </member>
        <member name="F:Robocode.Rules.GUN_TURN_RATE_RADIANS">
             <summary>
             The turning rate of the gun measured in radians instead of degrees.
            
             <seealso cref="F:Robocode.Rules.GUN_TURN_RATE"/>
             </summary>
        </member>
        <member name="F:Robocode.Rules.RADAR_TURN_RATE">
             <summary>
             The turning rate of the radar measured in degrees, which is 45 degrees/turn.
             Note, that if AdjustRadarForRobotTurn = true and/or
             AdjustRadarForGunTurn = true has been set, the radar turn is independent of
             the robot and/or gun turn. If both properties hava been set to true, the radar
             moves relatively to the screen.
             <p/>
             If AdjustRadarForRobotTurn = false and/or AdjustRadarForGunTurn = false
             have been set or not set at all (this is the default), then the radar turn is
             dependent on the robot and/or gun turn, and in this case the radar moves
             relatively to the gun and/or robot body.
            
             <seealso cref="F:Robocode.Rules.RADAR_TURN_RATE_RADIANS"/>
             <seealso cref="P:Robocode.Robot.IsAdjustGunForRobotTurn"/>
             <seealso cref="P:Robocode.Robot.IsAdjustRadarForGunTurn"/>
             </summary>
        </member>
        <member name="F:Robocode.Rules.RADAR_TURN_RATE_RADIANS">
             <summary>
             The turning rate of the radar measured in radians instead of degrees.
            
             <seealso cref="F:Robocode.Rules.RADAR_TURN_RATE"/>
             </summary>
        </member>
        <member name="F:Robocode.Rules.ROBOT_HIT_DAMAGE">
            <summary>
            The amount of damage taken when a robot hits or is hit by another robot,
            which is 0.6 energy points.
            </summary>
        </member>
        <member name="F:Robocode.Rules.ROBOT_HIT_BONUS">
            <summary>
            The amount of bonus given when a robot moving forward hits an opponent
            robot (ramming), which is 1.2 energy points.
            </summary>
        </member>
        <member name="M:Robocode.Rules.GetTurnRate(System.Double)">
            <summary>
            Returns the turn rate of a robot given a specific velocity measured in
            degrees/turn.
            <seealso cref="M:Robocode.Rules.GetTurnRateRadians(System.Double)"/>
            </summary>
            <param name="velocity">The velocity of the robot.</param>
        </member>
        <member name="M:Robocode.Rules.GetTurnRateRadians(System.Double)">
            <summary>
            Returns the turn rate of a robot given a specific velocity measured in
            radians/turn.
            <seealso cref="M:Robocode.Rules.GetTurnRate(System.Double)"/>
            </summary>
            <param name="velocity">the velocity of the robot.</param>
        </member>
        <member name="M:Robocode.Rules.GetWallHitDamage(System.Double)">
            <summary>
            Returns the amount of damage taken when robot hits a wall with a
            specific velocity.
            </summary>
            <param name="velocity"> the velocity of the robot.</param>
        </member>
        <member name="M:Robocode.Rules.GetBulletDamage(System.Double)">
            <summary>
            Returns the amount of damage of a bullet given a specific bullet power.
            </summary>
            <param name="bulletPower"> the energy power of the bullet.</param>
        </member>
        <member name="M:Robocode.Rules.GetBulletHitBonus(System.Double)">
            <summary>
            Returns the amount of bonus given when a robot's bullet hits an opponent
            robot given a specific bullet power.
            </summary>
            <param name="bulletPower">the energy power of the bullet</param>
        </member>
        <member name="M:Robocode.Rules.GetBulletSpeed(System.Double)">
            <summary>
            Returns the speed of a bullet given a specific bullet power measured in
            pixels/turn.
            </summary>
            <param name="bulletPower">the energy power of the bullet.</param>
        </member>
        <member name="M:Robocode.Rules.GetGunHeat(System.Double)">
            <summary>
            Returns the heat produced by firing the gun given a specific bullet power.
            </summary>
            <param name="bulletPower">the energy power of the bullet</param>
        </member>
        <member name="T:Robocode.ScannedRobotEvent">
            <summary>
            A ScannedRobotEvent is sent to <see cref="M:Robocode.Robot.OnScannedRobot(Robocode.ScannedRobotEvent)"/>
            OnScannedRobot()} when you scan a robot.
            You can use the information contained in this event to determine what to do.
            <p/>
            <b>Note</b>: You should not inherit from this class in your own event class!
            The internal logic of this event class might change. Hence, your robot might
            not work in future Robocode versions, if you choose to inherit from this class.
            </summary>
        </member>
        <member name="M:Robocode.ScannedRobotEvent.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called by the game to create a new ScannedRobotEvent.
            </summary>
            <param name="name">The name of the scanned robot</param>
            <param name="energy">The energy of the scanned robot</param>
            <param name="bearing">The bearing of the scanned robot, in radians</param>
            <param name="distance">The distance from your robot to the scanned robot</param>
            <param name="heading">The heading of the scanned robot</param>
            <param name="velocity">The velocity of the scanned robot</param>
        </member>
        <member name="M:Robocode.ScannedRobotEvent.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Called by the game to create a new ScannedRobotEvent.
            </summary>
            <param name="name">The name of the scanned robot</param>
            <param name="energy">The energy of the scanned robot</param>
            <param name="bearing">The bearing of the scanned robot, in radians</param>
            <param name="distance">The distance from your robot to the scanned robot</param>
            <param name="heading">The heading of the scanned robot</param>
            <param name="velocity">The velocity of the scanned robot</param>
            <param name="isSentryRobot">Flag specifying if the scanned robot is a sentry robot</param>
        </member>
        <member name="M:Robocode.ScannedRobotEvent.CompareTo(Robocode.Event)">
            <inheritdoc />
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Bearing">
            <summary>
            Returns the bearing to the robot you scanned, relative to your robot's
            heading, in degrees (-180 &lt;= getBearing() &lt; 180)
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.BearingRadians">
            <summary>
            Returns the bearing to the robot you scanned, relative to your robot's
            heading, in radians (-PI &lt;= getBearingRadians() &lt; PI)
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Distance">
            <summary>
            Returns the distance to the robot (your center to his center).
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Energy">
            <summary>
            Returns the energy of the robot.
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Heading">
            <summary>
            Returns the heading of the robot, in degrees (0 &lt;= getHeading() &lt; 360)
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.HeadingRadians">
            <summary>
            Returns the heading of the robot, in radians (0 &lt;= getHeading() &lt; 2 * PI)
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Name">
            <summary>
            Returns the name of the robot.
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.Velocity">
            <summary>
            Returns the velocity of the robot.
            </summary>
        </member>
        <member name="P:Robocode.ScannedRobotEvent.IsSentryRobot">
            <summary>
            <code>true</code> if the scanned robot is a sentry robot; <code>false</code> otherwise.
            </summary>
        </member>
        <member name="T:Robocode.SkippedTurnEvent">
            <summary>
            A SkippedTurnEvent is sent to <see cref="M:Robocode.AdvancedRobot.OnSkippedTurn(Robocode.SkippedTurnEvent)"/>
            OnSkippedTurn()} when your robot is forced to skipping a turn.
            You must take an action every turn in order to participate in the game.
            <example>
              <code>
              Thread.Sleep(1000);
              </code>
              will cause many SkippedTurnEvents, because you are not responding to the game.
              If you receive 30 SkippedTurnEvents, you will be removed from the round.
              <p/>
              Instead, you should do something such as:
              <code>
              for (int i = 0; i &lt; 30; i++)
              {
                  DoNothing(); // or perhaps Scan();
              }
              </code>
            </example>
            <p/>
            This event may also be generated if you are simply doing too much processing
            between actions, that is using too much processing power for the calculations
            etc. in your robot.
            <seealso cref="M:Robocode.AdvancedRobot.OnSkippedTurn(Robocode.SkippedTurnEvent)"/>
            <seealso cref="T:Robocode.SkippedTurnEvent"/>
            </summary>
        </member>
        <member name="M:Robocode.SkippedTurnEvent.#ctor(System.Int64)">
            <summary>
            Called by the game to create a new SkippedTurnEvent.
            </summary>
        </member>
        <member name="P:Robocode.SkippedTurnEvent.SkippedTurn">
            <summary>
            Returns the turn that was skipped.
            </summary>
        </member>
        <member name="P:Robocode.SkippedTurnEvent.Priority">
            <inheritdoc />
        </member>
        <member name="T:Robocode.StatusEvent">
            <summary>
            This event is sent to <see cref="M:Robocode.Robot.OnStatus(Robocode.StatusEvent)"/> every
            turn in a battle to provide the status of the robot.
            </summary>
        </member>
        <member name="M:Robocode.StatusEvent.#ctor(Robocode.RobotStatus)">
             <summary>
             This constructor is called internally from the game in order to create
             a new <see cref="T:Robocode.RobotStatus"/>.
            
             </summary>
             <param name="status">the current states</param>
        </member>
        <member name="P:Robocode.StatusEvent.Status">
            <summary>
            Returns the <see cref="T:Robocode.RobotStatus"/> at the time defined by <see cref="P:Robocode.Robot.Time"/>.
            <seealso cref="P:Robocode.Event.Time"/>
            </summary>
        </member>
        <member name="T:Robocode.Thread">
            <summary>
            Wrapper for .NET Thread, secured according to robocode rules.
            </summary>
        </member>
        <member name="M:Robocode.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
            <summary>
            Initializes a new instance of the Thread class
            </summary>
            <param name="start">A ThreadStart delegate that represents the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:Robocode.Thread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class
            </summary>
            <param name="start">A ThreadStart delegate that represents the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:Robocode.Thread.Sleep(System.Int32)">
            <summary>
            Blocks the current thread for the specified number of milliseconds.
            </summary>
        </member>
        <member name="M:Robocode.Thread.Start(System.Object)">
            <summary>
            Causes a thread to be scheduled for execution.
            </summary>
        </member>
        <member name="M:Robocode.Thread.Start">
            <summary>
            Causes a thread to be scheduled for execution.
            </summary>
        </member>
        <member name="T:Robocode.TurnCompleteCondition">
            <summary>
            A prebuilt condition you can use that indicates your robot has finished turning.
            </summary>
            <seealso cref="T:Robocode.Condition"/>
        </member>
        <member name="M:Robocode.TurnCompleteCondition.#ctor(Robocode.AdvancedRobot)">
            <summary>
            Creates a new TurnCompleteCondition with default priority.
            The default priority is 80.
            </summary>
            <param name="robot">Your robot, which must be an <see cref="T:Robocode.AdvancedRobot"/></param>
        </member>
        <member name="M:Robocode.TurnCompleteCondition.#ctor(Robocode.AdvancedRobot,System.Int32)">
            <summary>
            Creates a new TurnCompleteCondition with the specified priority.
            A condition priority is a value from 0 - 99. The higher value, the
            higher priority. The default priority is 80.
            </summary>
            <param name="robot">Your robot, which must be an <see cref="T:Robocode.AdvancedRobot"/></param>
            <param name="priority">The priority of this condition</param>
            <seealso cref="P:Robocode.Condition.Priority"/>
        </member>
        <member name="M:Robocode.TurnCompleteCondition.Test">
            <summary>
            Tests if the robot has finished turning.
            Returns true if the robot has stopped turning; false otherwise
            </summary>
        </member>
        <member name="T:Robocode.WinEvent">
            <summary>
              This event is sent to <see cref="M:Robocode.Robot.OnWin(Robocode.WinEvent)"/> when your robot
              wins the round in a battle.
            </summary>
        </member>
        <member name="P:Robocode.WinEvent.Priority">
            <inheritdoc />
        </member>
    </members>
</doc>
